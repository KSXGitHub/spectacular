// Generated by CoffeeScript 1.6.3
(function() {
  var ClassWithCollection, ConcernWithExcludedHook, ConcernWithIncludedAndExcluded, Dummy, GlobalizableClass, MixinWithExcludedClassProperty, MixinWithExcludedProperty, MixinWithExtendedHook, MixinWithIncludedHook, MixinWithoutExtendedHook, MixinWithoutIncludedHook, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  spectacular.matcher('sample', function() {
    description(function() {
      return 'sample description';
    });
    match(function() {
      return true;
    });
    return failureMessageForShould(function() {
      return 'sample message';
    });
  });

  spectacular.matcher('parameterizableMatcher', function() {
    takes('value1', 'value2');
    description(function() {
      return 'parameterizableMatcher description';
    });
    match(function() {
      return this.value1 && this.value2;
    });
    return failureMessageForShould(function() {
      return 'parameterizableMatcher message';
    });
  });

  spectacular.matcher('chainableMatcher', function() {
    match(function() {
      return this.value;
    });
    description(function() {
      return 'chain';
    });
    return chain('chain', function(value) {
      this.value = value;
    });
  });

  spectacular.matcher('initializableMatcher', function() {
    init(function() {
      return this.value = true;
    });
    match(function() {
      return this.value;
    });
    return description(function() {
      return 'initalized';
    });
  });

  spectacular.matcher('timeout', function() {
    timeout(100);
    description(function() {
      return 'timing out promise based matcher';
    });
    match(function() {
      return new spectacular.Promise;
    });
    return failureMessageForShould(function() {
      return 'matcher message';
    });
  });

  spectacular.matcher('throwing', function() {
    return match(function() {
      throw new Error('foo');
    });
  });

  spectacular.helper('createEnv', function(block, context, options) {
    var env, k, v;
    env = spectacular.env.clone();
    env.options.colors = false;
    for (k in options) {
      v = options[k];
      env.options[k] = v;
    }
    env.runner.paths = spectacular.env.runner.paths;
    context.results = '';
    spyOn(env, 'globalize').andCallThrough(function() {
      var promise;
      promise = spectacular.Promise.unit();
      return promise.then(function() {
        return block();
      });
    });
    return env;
  });

  spectacular.helper('createReporter', function(env, context, async) {
    var reporter;
    reporter = new spectacular.ConsoleReporter(env.options);
    context.results = '';
    reporter.on('message', function(e) {
      return context.results += e.target;
    });
    reporter.on('report', function(e) {
      context.results += e.target;
      if (context.ended) {
        if (context.rejected != null) {
          async.reject(context.rejected);
        } else {
          async.resolve();
        }
      }
      return context.ended = true;
    });
    env.runner.on('message', reporter.onMessage);
    env.runner.on('result', reporter.onResult);
    env.runner.on('end', reporter.onEnd);
    return reporter;
  });

  spectacular.helper('runEnvExpectingNormalTermination', function(env, context, async) {
    var oldEnv;
    oldEnv = spectacular.env;
    oldEnv.unglobalize();
    spectacular.env = env;
    return env.globalize().then(function() {
      return env.run();
    }).then(function(status) {
      context.status = status;
      spectacular.env.unglobalize();
      spectacular.env = oldEnv;
      oldEnv.globalize();
      if (context.ended) {
        async.resolve();
      }
      return context.ended = true;
    }).fail(function(reason) {
      context.reason = context.rejected = reason;
      spectacular.env.unglobalize();
      spectacular.env = oldEnv;
      oldEnv.globalize();
      return async.reject(reason);
    });
  });

  spectacular.helper('runEnvExpectingInterruption', function(env, context, async) {
    var oldEnv,
      _this = this;
    oldEnv = spectacular.env;
    oldEnv.unglobalize();
    spectacular.env = env;
    return env.globalize().then(function() {
      return env.run();
    }).then(function(status) {
      spectacular.env = oldEnv;
      spectacular.env.unglobalize();
      oldEnv.globalize();
      context.rejected = new Error("run didn't failed");
      if (context.ended) {
        async.reject(context.rejected);
      }
      return context.ended = true;
    }).fail(function(reason) {
      spectacular.env = oldEnv;
      spectacular.env.unglobalize();
      context.reason = reason;
      oldEnv.globalize();
      return async.resolve();
    });
  });

  spectacular.helper('runningSpecs', function(desc) {
    var options;
    options = {};
    return {
      withOption: function(option, value) {
        options[option] = value;
        return this;
      },
      shouldFailWith: function(re, block) {
        describe("running specs with " + desc, function() {
          before(function(async) {
            this.env = createEnv(block, this, options);
            this.reporter = createReporter(this.env, this, async);
            return runEnvExpectingNormalTermination(this.env, this, async);
          });
          specify('the status', function() {
            return this.status.should(be(1));
          });
          return specify('the results', function() {
            return this.results.should(match(re));
          });
        });
        return this;
      },
      shouldSucceedWith: function(re, block) {
        describe("running specs with " + desc, function() {
          before(function(async) {
            this.env = createEnv(block, this, options);
            this.reporter = createReporter(this.env, this, async);
            return runEnvExpectingNormalTermination(this.env, this, async);
          });
          specify('the status', function() {
            return this.status.should(be(0));
          });
          return specify('the results', function() {
            return this.results.should(match(re));
          });
        });
        return this;
      },
      shouldStopWith: function(re, block) {
        describe("running specs with " + desc, function() {
          before(function(async) {
            this.env = createEnv(block, this, options);
            this.reporter = createReporter(this.env, this, async);
            return runEnvExpectingInterruption(this.env, this, async);
          });
          return specify('the error message', function() {
            return this.reason.message.should(match(re));
          });
        });
        return this;
      }
    };
  });

  spectacular.helper('environmentMethod', function(method) {
    return {
      cannotBeCalledInsideIt: function() {
        return runningSpecs('call inside it').shouldFailWith(/called inside a it block/, function() {
          return describe('foo', function() {
            return it(function() {
              return spectacular.global[method]();
            });
          });
        });
      },
      cannotBeCalledOutsideIt: function() {
        return runningSpecs('call outside it').shouldStopWith(/called outside a it block/, function() {
          return describe('foo', function() {
            return spectacular.global[method]();
          });
        });
      },
      cannotBeCalledWithoutPreviousSubject: function() {
        return runningSpecs('call in context without previous subject').shouldStopWith(/called in context without a previous subject/, function() {
          return describe('foo', function() {
            return spectacular.global[method]();
          });
        });
      },
      cannotBeCalledWithoutMatcher: function() {
        return runningSpecs('call without matcher').shouldFailWith(/called without a matcher/, function() {
          return specify(function() {
            return spectacular.global[method]();
          });
        });
      }
    };
  });

  runningSpecs('error raised in spec file').shouldStopWith(/message/, function() {
    throw new Error('message');
  });

  runningSpecs('error raised in describe').shouldStopWith(/message/, function() {
    return describe('failing declaration', function() {
      throw new Error('message');
    });
  });

  runningSpecs('pending examples').shouldSucceedWith(/0 errors, 0 skipped, 2 pending/, function() {
    return describe('pending examples', function() {
      it(function() {
        return pending();
      });
      return it(function() {
        return pending();
      });
    });
  });

  runningSpecs('excluded examples').shouldSucceedWith(/2 success, 2 assertion/, function() {
    return describe('inclusive examples', function() {
      it(function() {
        return true.should(be(true));
      });
      it(function() {
        return true.should(be(true));
      });
      return except(it(function() {
        return true.should(be(true));
      }));
    });
  });

  runningSpecs('scoped examples').shouldSucceedWith(/1 success, 1 assertion/, function() {
    return describe('exclusive examples', function() {
      it(function() {
        return true.should(be(true));
      });
      it(function() {
        return true.should(be(true));
      });
      return only(it(function() {
        return true.should(be(true));
      }));
    });
  });

  runningSpecs('inclusive groups').shouldSucceedWith(/2 success, 2 assertion/, function() {
    describe('included groups', function() {
      it(function() {
        return true.should(be(true));
      });
      return it(function() {
        return true.should(be(true));
      });
    });
    return except(describe('inclusive groups', function() {
      return it(function() {
        return true.should(be(true));
      });
    }));
  });

  runningSpecs('exclusive groups').shouldSucceedWith(/1 success, 1 assertion/, function() {
    describe('excluded groups', function() {
      it(function() {
        return true.should(be(true));
      });
      return it(function() {
        return true.should(be(true));
      });
    });
    return only(describe('exclusive groups', function() {
      return it(function() {
        return true.should(be(true));
      });
    }));
  });

  runningSpecs('skipped examples').shouldFailWith(/0 errors, 2 skipped/, function() {
    return describe('skipped examples', function() {
      it(function() {
        return skip();
      });
      return it(function() {
        return skip();
      });
    });
  });

  runningSpecs('failing examples').shouldFailWith(/2 failures, 0 errors/, function() {
    return describe('failing examples', function() {
      it(function() {
        return fail();
      });
      return it(function() {
        return fail();
      });
    });
  });

  runningSpecs('long trace, colors, no source and no documentation').withOption('longTrace', true).withOption('noColors', false).withOption('showSource', false).withOption('documentation', false).shouldFailWith(/1\ssuccess(.*)1\sfailure(.*)1\serror(.*)1\sskipped(.*)1\spending/, function() {
    return describe('failing examples', function() {
      it(function() {
        return true.should(be(true));
      });
      it(function() {
        return fail();
      });
      it(function() {
        throw new Error;
      });
      it(function() {
        return skip();
      });
      return it(function() {
        return pending();
      });
    });
  });

  runningSpecs('it without block').shouldSucceedWith(/0 success, 0 assertions, (.*), 1 pending/, function() {
    return describe('it without block', function() {
      return it('foo');
    });
  });

  runningSpecs('describe without block').shouldSucceedWith(/0 success, 0 assertions, (.*), 1 pending/, function() {
    return describe('foo');
  });

  runningSpecs('async example timing out').shouldFailWith(/1 failure/, function() {
    return it(function(async) {
      return async.rejectAfter(100, 'Timed out');
    });
  });

  runningSpecs('unhandled exception raised in example').shouldFailWith(/0 assertions, 0 failures, 1 error/, function() {
    return describe('failing example', function() {
      return it(function() {
        throw new Error('message');
      });
    });
  });

  runningSpecs('unhandled exception raised in example with expectations').shouldFailWith(/1 assertion, 0 failures, 1 error/, function() {
    return describe('failing example with expectation', function() {
      return it('should have been stopped', function() {
        true.should(be(true));
        throw new Error('message');
      });
    });
  });

  runningSpecs('unhandled exception raised in before').shouldFailWith(/0 assertions, 0 failures, 1 error/, function() {
    return describe('with successful example', function() {
      before(function() {
        throw new Error('message');
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('async before hook timing out').shouldFailWith(/0 assertions, (.*), 1 error/, function() {
    return describe('with successful example', function() {
      before(function(async) {
        return async.rejectAfter(100);
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('async before hook rejected').shouldFailWith(/0 assertions, (.*), 1 error/, function() {
    return describe('with successful example', function() {
      before(function(async) {
        return async.reject(new Error('message'));
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('unhandled exception raised in after').shouldFailWith(/0 success, 1 assertion, 0 failures, 1 error/, function() {
    return describe('with successful example', function() {
      after(function() {
        throw new Error('message');
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('unhandled exception raised in after').shouldFailWith(/0 success, 1 assertion, 0 failures, 1 error/, function() {
    return describe('with failing example', function() {
      after(function() {
        throw new Error('message');
      });
      return it(function() {
        return true.should(be(false));
      });
    });
  });

  runningSpecs('async after hook timing out').shouldFailWith(/1 assertion, (.*), 1 error/, function() {
    return describe('with successful example', function() {
      after(function(async) {
        return async.rejectAfter(100);
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('async after hook rejected').shouldFailWith(/1 assertion, (.*), 1 error/, function() {
    return describe('with successful example', function() {
      after(function(async) {
        return async.reject(new Error('message'));
      });
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('unhandled exception raised in matcher').shouldFailWith(/1 assertion, 0 failures, 1 error/, function() {
    return describe('failing example', function() {
      return it(function() {
        return {}.should(throwing);
      });
    });
  });

  describe('sequencial assertions', function() {
    return it('should succeed', function() {
      var o;
      o = {
        foo: 10
      };
      o.foo.should(equal(10));
      o.foo = "100";
      return o.foo.should(equal('100'));
    });
  });

  describe('snake case syntax', function() {
    given('object', function() {
      return {
        method: function() {}
      };
    });
    before(function() {
      spy_on(this.object, 'method');
      return this.object.method();
    });
    return specify('for haveBeenCalled matcher', function() {
      return this.object.method.should(have_been_called);
    });
  });

  describe('matcher', function() {
    describe(sample, function() {
      it(function() {
        return should(exist);
      });
      return it(function() {
        return should(sample);
      });
    });
    describe(parameterizableMatcher, function() {
      it(function() {
        return should(exist);
      });
      return it(function() {
        return should(parameterizableMatcher(true, true));
      });
    });
    describe(chainableMatcher, function() {
      it(function() {
        return should(exist);
      });
      return it(function() {
        return should(chainableMatcher.chain(true));
      });
    });
    describe(initializableMatcher, function() {
      it(function() {
        return should(exist);
      });
      return it(function() {
        return should(initializableMatcher);
      });
    });
    runningSpecs('matcher returning timing out promise').shouldStopWith(/can't create matcher foo without a match/, function() {
      return spectacular.matcher('foo', function() {});
    });
    return runningSpecs('matcher returning timing out promise').shouldFailWith(/1 failure/, function() {
      return describe(timeout, function() {
        return it(function() {
          return should(timeout);
        });
      });
    });
  });

  runningSpecs('missing dependency').shouldSucceedWith(/Warning: unmet dependency foo/, function() {
    return describe('dependent', function() {
      dependsOn('foo');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('example depending on succeeding examples').shouldSucceedWith(/3 success, 3 assertions, 0 failures, 0 errors, 0 skipped/, function() {
    describe('dependency 1', {
      id: 'success1'
    }, function() {
      return it(function() {
        return true.should(be(true));
      });
    });
    describe('dependency 2', {
      id: 'success2'
    }, function() {
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('dependent', function() {
      dependsOn('success1');
      dependsOn('success2');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('example depending on a failing example').shouldFailWith(/1 failure, 0 errors, 1 skipped/, function() {
    describe('dependency', {
      id: 'top'
    }, function() {
      return context('succeeding', function() {
        return it(function() {
          return true.should(be(true));
        });
      });
    });
    describe('dependency failing', {
      id: 'failure'
    }, function() {
      return it(function() {
        return false.should(be(true));
      });
    });
    return describe('dependent', function() {
      dependsOn('top');
      dependsOn('failure');
      return it('should be skipped', function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('parent depending on child').shouldStopWith(/can't depends on ancestor/, function() {
    return describe('parent', {
      id: 'parent1'
    }, function() {
      return context('child', {
        id: 'child1'
      }, function() {
        dependsOn('parent1');
        return it(function() {
          return true.should(be(true));
        });
      });
    });
  });

  runningSpecs('child depending on parent').shouldStopWith(/can't depends on ancestor/, function() {
    return describe('parent', {
      id: 'parent2'
    }, function() {
      dependsOn('child2');
      return context('child', {
        id: 'child2'
      }, function() {
        return it(function() {
          return true.should(be(true));
        });
      });
    });
  });

  runningSpecs('circular dependencies').shouldStopWith(/circular dependencies between/, function() {
    describe('cycle 1', {
      id: 'c1'
    }, function() {
      dependsOn('c2');
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('cycle 2', {
      id: 'c2'
    }, function() {
      dependsOn('c1');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('exclusive examples in group with dependencies').shouldSucceedWith(/3 success, 3 assertion/, function() {
    describe('excluded groups', {
      id: 'success'
    }, function() {
      it(function() {
        return true.should(be(true));
      });
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('exclusive groups', function() {
      dependsOn('success');
      return only(it(function() {
        return true.should(be(true));
      }));
    });
  });

  runningSpecs('deep circular dependencies').shouldStopWith(/circular dependencies between/, function() {
    describe('cycle 1', {
      id: 'c1'
    }, function() {
      describe('child 1', {
        id: 'cc1'
      }, function() {
        return dependsOn('c2');
      });
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('cycle 2', {
      id: 'c2'
    }, function() {
      dependsOn('cc1');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('n+1 circular dependencies').shouldStopWith(/circular dependencies between/, function() {
    describe('cycle 1', {
      id: 'c1'
    }, function() {
      dependsOn('c2');
      return it(function() {
        return true.should(be(true));
      });
    });
    describe('cycle 2', {
      id: 'c2'
    }, function() {
      dependsOn('c3');
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('cycle 3', {
      id: 'c3'
    }, function() {
      dependsOn('c1');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('cascading successful examples').shouldSucceedWith(/3 success, 3 assertions, 0 failures/, function() {
    return describe('parent group', function() {
      it(function() {
        return true.should(be(true));
      });
      return whenPass(function() {
        it(function() {
          return true.should(be(true));
        });
        return whenPass(function() {
          return context('in a nested context', function() {
            return it(function() {
              return true.should(be(true));
            });
          });
        });
      });
    });
  });

  runningSpecs('cascading failing examples').shouldFailWith(/0 success, 1 assertion, 1 failure, (.*), 2 skipped/, function() {
    return describe(null, function() {
      it(function() {
        return should(exist);
      });
      return whenPass(function() {
        return context('skipped', function() {
          it(function() {
            return true.should(be(true));
          });
          return whenPass(function() {
            return context('skipped', function() {
              return it(function() {
                return true.should(be(true));
              });
            });
          });
        });
      });
    });
  });

  runningSpecs('cascading & depenpent failing examples').shouldFailWith(/1 success, 2 assertions, 1 failure, (.*), 1 skipped/, function() {
    describe('success group', {
      id: 'success'
    }, function() {
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('parent group', function() {
      it(function() {
        return true.should(be(false));
      });
      return whenPass(function() {
        dependsOn('success');
        return context('skipped', function() {
          return it(function() {
            return true.should(be(true));
          });
        });
      });
    });
  });

  describe(spectacular.dom.DOMExpression, function() {
    fixture('sample.html');
    it(function() {
      return should(exist);
    });
    return whenPass(function() {
      given('dom', function() {
        return 'html\n  head\n  body\n    section\n      header\n        h1\n          \'title\'\n      article\n        h3\n          \'article title\'\n        p\n          /article content/\n\n      footer';
      });
      withArguments(function() {
        return [this.dom];
      });
      itsInstance(function() {
        return should(exist);
      });
      itsInstance('source', function() {
        return should(equal(this.dom));
      });
      describe('::match', function() {
        itsReturn({
          "with": (function() {
            return [document.querySelector('html')];
          })
        }, function() {
          return should(be(true));
        });
        itsReturn({
          "with": (function() {
            return [document.querySelector('#fixtures section')];
          })
        }, function() {
          return should(be(false));
        });
        return itsReturn({
          "with": (function() {
            return [document.querySelectorAll('section')];
          })
        }, function() {
          return should(be(false));
        });
      });
      describe('::contained', function() {
        itsReturn({
          "with": (function() {
            return [document.querySelector('html')];
          })
        }, function() {
          return should(be(false));
        });
        context('with a dom looking for node content', function() {
          given('dom', function() {
            return 'article\n  h3\n    \'article title\'\n  p\n    /article.*content/';
          });
          return itsReturn({
            "with": (function() {
              return [document];
            })
          }, function() {
            return should(be(true));
          });
        });
        return context('with a dom failing after a negative indent', function() {
          given('dom', function() {
            return 'article\n  h3\n    \'article title\'\n  p\n    /article.*foo/';
          });
          return itsReturn({
            "with": (function() {
              return [document];
            })
          }, function() {
            return should(be(false));
          });
        });
      });
      return context('with an invalid dom', function() {
        subject(function() {
          var _this = this;
          return function() {
            return new spectacular.dom.DOMExpression(_this.dom);
          };
        });
        context('due to an invalid root indent', function() {
          given('dom', function() {
            return '  html';
          });
          return it(function() {
            return should(throwAnError(/invalid indent on line 1/));
          });
        });
        context('due to an invalid nested indent', function() {
          given('dom', function() {
            return 'html\n    head';
          });
          return it(function() {
            return should(throwAnError(/invalid indent on line 2/));
          });
        });
        context('due to an incomplete indent', function() {
          given('dom', function() {
            return 'html\n head';
          });
          return it(function() {
            return should(throwAnError(/invalid indent on line 2/));
          });
        });
        return context('due to a child for text expression', function() {
          given('dom', function() {
            return 'html\n  "text"\n    div';
          });
          return it(function() {
            return should(throwAnError(/text expressions cannot have children on line 3/));
          });
        });
      });
    });
  });

  describe(describe, function() {
    runningSpecs('call in a describe block').shouldSucceedWith(/1 success/, function() {
      return describe('foo', function() {
        return describe('bar', function() {
          subject(function() {
            return true;
          });
          return it(function() {
            return should(be(true));
          });
        });
      });
    });
    runningSpecs('without examples').shouldSucceedWith(/1 pending/, function() {
      return describe('foo', function() {});
    });
    return environmentMethod('describe').cannotBeCalledInsideIt();
  });

  describe(context, function() {
    runningSpecs('call in a describe block').shouldSucceedWith(/1 success/, function() {
      return describe('foo', function() {
        return context('bar', function() {
          subject(function() {
            return true;
          });
          return it(function() {
            return should(be(true));
          });
        });
      });
    });
    return environmentMethod('context').cannotBeCalledInsideIt();
  });

  describe(xdescribe, function() {
    runningSpecs('call at top level').shouldSucceedWith(/0 failures, (.*), 1 pending/, function() {
      return xdescribe('pending examples', function() {
        return it(function() {
          return fail();
        });
      });
    });
    return environmentMethod('xdescribe').cannotBeCalledInsideIt();
  });

  describe(xcontext, function() {
    runningSpecs('call at top level').shouldSucceedWith(/0 failures, (.*), 1 pending/, function() {
      return xcontext('pending examples', function() {
        return it(function() {
          return fail();
        });
      });
    });
    return environmentMethod('xcontext').cannotBeCalledInsideIt();
  });

  describe(should, function() {
    runningSpecs('call inside it').shouldSucceedWith(/1 success, 1 assertion/, function() {
      return describe('foo', function() {
        subject(function() {
          return true;
        });
        return it(function() {
          return should(be(true));
        });
      });
    });
    runningSpecs('call outside it').shouldStopWith(/should called outside a it block/, function() {
      return describe('foo', function() {
        return should(be(true));
      });
    });
    return environmentMethod('should').cannotBeCalledWithoutMatcher();
  });

  describe(it, function() {
    runningSpecs('call inside describe').shouldSucceedWith(/2 success, 2 assertion/, function() {
      return describe('foo', function() {
        subject(function() {
          return true;
        });
        it(function() {
          return should(be(true));
        });
        return it('with message', function() {
          return should(be(true));
        });
      });
    });
    return environmentMethod('it').cannotBeCalledInsideIt();
  });

  describe(the, function() {
    runningSpecs('call inside describe').shouldSucceedWith(/2 success, 2 assertion/, function() {
      return describe('foo', function() {
        subject(function() {
          return true;
        });
        the(function() {
          return should(be(true));
        });
        return the('with message', function() {
          return should(be(true));
        });
      });
    });
    return environmentMethod('the').cannotBeCalledInsideIt();
  });

  describe(xit, function() {
    runningSpecs('call inside describe').shouldSucceedWith(/2 pending/, function() {
      return describe('foo', function() {
        subject(function() {
          return true;
        });
        xit(function() {
          return should(be(true));
        });
        return xit('with message', function() {
          return should(be(true));
        });
      });
    });
    return environmentMethod('xit').cannotBeCalledInsideIt();
  });

  describe(withParameters, function() {
    runningSpecs('call inside describe').shouldSucceedWith(/1 success/, function() {
      var f;
      f = function(a) {
        return a;
      };
      return describe(f, function() {
        withParameters(10);
        return itsReturn(function() {
          return should(equal(10));
        });
      });
    });
    return environmentMethod('withParameters').cannotBeCalledInsideIt();
  });

  describe(withArguments, function() {
    runningSpecs('call inside describe').shouldSucceedWith(/1 success/, function() {
      var f;
      f = function(a) {
        return a;
      };
      return describe(f, function() {
        withArguments(10);
        return itsReturn(function() {
          return should(equal(10));
        });
      });
    });
    return environmentMethod('withArguments').cannotBeCalledInsideIt();
  });

  describe(Object, function() {
    return describe('::should', function() {
      runningSpecs('call inside it').shouldSucceedWith(/1 success, 1 assertion/, function() {
        return describe('foo', function() {
          return the(function() {
            return true.should(be(true));
          });
        });
      });
      runningSpecs('call inside it without matcher').shouldSucceedWith(/0 success, 0 assertions, (.*), 1 pending/, function() {
        return describe('foo', function() {
          return the(function() {
            return {}.should();
          });
        });
      });
      return runningSpecs('call outside it').shouldStopWith(/should called outside a it block/, function() {
        return describe('foo', function() {
          return {}.should(be(true));
        });
      });
    });
  });

  describe(before, function() {
    runningSpecs('call in describe').shouldSucceedWith(/1 success/, function() {
      return describe('foo', function() {
        before(function() {
          return this.object = {};
        });
        return the(function() {
          return this.object.should(exist);
        });
      });
    });
    return environmentMethod('before').cannotBeCalledInsideIt();
  });

  describe(after, function() {
    return environmentMethod('after').cannotBeCalledInsideIt();
  });

  describe(withParameters, function() {
    return environmentMethod('withParameters').cannotBeCalledInsideIt();
  });

  describe(withArguments, function() {
    return environmentMethod('withArguments').cannotBeCalledInsideIt();
  });

  describe(dependsOn, function() {
    return environmentMethod('dependsOn').cannotBeCalledInsideIt();
  });

  describe(whenPass, function() {
    return environmentMethod('whenPass').cannotBeCalledInsideIt();
  });

  describe(fixture, function() {
    return environmentMethod('fixture').cannotBeCalledInsideIt();
  });

  describe(spyOn, function() {
    return environmentMethod('spyOn').cannotBeCalledOutsideIt();
  });

  describe(itsReturn, function() {
    environmentMethod('itsReturn').cannotBeCalledInsideIt();
    return environmentMethod('itsReturn').cannotBeCalledWithoutPreviousSubject();
  });

  describe(itsInstance, function() {
    environmentMethod('itsInstance').cannotBeCalledInsideIt();
    environmentMethod('itsInstance').cannotBeCalledWithoutPreviousSubject();
    return context('with a class that takes arguments in constructor', function() {
      subject(function() {
        var Foo;
        return Foo = (function() {
          function Foo(a, b) {
            this.a = a;
            this.b = b;
          }

          return Foo;

        })();
      });
      itsInstance({
        "with": [0, 1]
      }, function() {
        return should(exist);
      });
      itsInstance('a', {
        "with": [0, 1]
      }, function() {
        return should(equal(0));
      });
      return itsInstance('b', {
        "with": [0, 1]
      }, function() {
        return should(equal(1));
      });
    });
  });

  describe('expect(...).to', function() {
    environmentMethod('expect').cannotBeCalledOutsideIt();
    runningSpecs('call with only a value').withOption('documentation', true).shouldSucceedWith(/10 should be equal to 10/, function() {
      return specify(function() {
        return expect(10).to(equal(10));
      });
    });
    runningSpecs('call with a description and a value').withOption('documentation', true).shouldSucceedWith(/a number should be equal to 10/, function() {
      return specify(function() {
        return expect('a number', 10).to(equal(10));
      });
    });
    return runningSpecs('call without matcher').shouldFailWith(/called without a matcher/, function() {
      return specify(function() {
        return expect().to();
      });
    });
  });

  describe('expect(...).not.to', function() {
    specify(function() {
      return expect('a number', 5).not.to(equal(10));
    });
    return runningSpecs('call without matcher').shouldFailWith(/called without a matcher/, function() {
      return specify(function() {
        return expect().not.to();
      });
    });
  });

  runningSpecs('inner example alias').shouldSucceedWith(/1 success/, function() {
    spectacular.env.createInnerExampleAlias('may', 'should');
    return describe('foo', function() {
      subject(function() {
        return true;
      });
      return it(function() {
        return may(be(true));
      });
    });
  });

  MixinWithIncludedHook = (function() {
    function MixinWithIncludedHook() {}

    MixinWithIncludedHook.included = function(cls) {
      return cls.prototype.otherProperty = 'also irrelevant';
    };

    MixinWithIncludedHook.prototype.property = 'irrelevant';

    return MixinWithIncludedHook;

  })();

  MixinWithoutIncludedHook = (function() {
    function MixinWithoutIncludedHook() {}

    MixinWithoutIncludedHook.prototype.property = 'irrelevant';

    return MixinWithoutIncludedHook;

  })();

  MixinWithExcludedProperty = (function() {
    function MixinWithExcludedProperty() {}

    MixinWithExcludedProperty.prototype.property = 'irrelevant';

    MixinWithExcludedProperty.prototype.otherProperty = 'also irrelevant';

    MixinWithExcludedProperty.prototype.excluded = ['otherProperty'];

    return MixinWithExcludedProperty;

  })();

  MixinWithExtendedHook = (function() {
    function MixinWithExtendedHook() {}

    MixinWithExtendedHook.extended = function(cls) {
      return cls.otherProperty = 'also irrelevant';
    };

    MixinWithExtendedHook.property = 'irrelevant';

    return MixinWithExtendedHook;

  })();

  MixinWithoutExtendedHook = (function() {
    function MixinWithoutExtendedHook() {}

    MixinWithoutExtendedHook.property = 'irrelevant';

    return MixinWithoutExtendedHook;

  })();

  MixinWithExcludedClassProperty = (function() {
    function MixinWithExcludedClassProperty() {}

    MixinWithExcludedClassProperty.property = 'irrelevant';

    MixinWithExcludedClassProperty.otherProperty = 'also irrelevant';

    MixinWithExcludedClassProperty.excluded = ['otherProperty'];

    return MixinWithExcludedClassProperty;

  })();

  ConcernWithIncludedAndExcluded = (function() {
    function ConcernWithIncludedAndExcluded() {}

    ConcernWithIncludedAndExcluded.included = function(cls) {
      return cls.prototype.otherProperty = 'also irrelevant';
    };

    ConcernWithIncludedAndExcluded.extended = function(cls) {
      return cls.otherProperty = 'also irrelevant';
    };

    ConcernWithIncludedAndExcluded.property = 'irrelevant';

    ConcernWithIncludedAndExcluded.prototype.property = 'irrelevant';

    return ConcernWithIncludedAndExcluded;

  })();

  ConcernWithExcludedHook = (function() {
    function ConcernWithExcludedHook() {}

    ConcernWithExcludedHook.property = 'irrelevant';

    ConcernWithExcludedHook.otherProperty = 'also irrelevant';

    ConcernWithExcludedHook.prototype.property = 'irrelevant';

    ConcernWithExcludedHook.prototype.otherProperty = 'also irrelevant';

    ConcernWithExcludedHook.excluded = ['otherProperty'];

    ConcernWithExcludedHook.prototype.excluded = ['property'];

    return ConcernWithExcludedHook;

  })();

  describe(Function, function() {
    given('dummy', function() {
      var DummyClass;
      return DummyClass = (function() {
        function DummyClass() {}

        return DummyClass;

      })();
    });
    describe('::include', function() {
      context('with a mixin that do not define the included hook', function() {
        before(function() {
          return this.dummy.include(MixinWithoutIncludedHook);
        });
        subject(function() {
          return new this.dummy;
        });
        return its('property', function() {
          return should(equal('irrelevant'));
        });
      });
      context('with a mixin that define the included hook', function() {
        before(function() {
          return this.dummy.include(MixinWithIncludedHook);
        });
        subject(function() {
          return new this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        return its('otherProperty', function() {
          return should(equal('also irrelevant'));
        });
      });
      return context('with a mixin that define the excluded hook', function() {
        before(function() {
          return this.dummy.include(MixinWithExcludedProperty);
        });
        subject(function() {
          return new this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        return its('otherProperty', function() {
          return shouldnt(exist);
        });
      });
    });
    describe('::extend', function() {
      context('with a mixin that do not define the extended hook', function() {
        before(function() {
          return this.dummy.extend(MixinWithoutExtendedHook);
        });
        subject(function() {
          return this.dummy;
        });
        return its('property', function() {
          return should(equal('irrelevant'));
        });
      });
      context('with a mixin that define the extended hook', function() {
        before(function() {
          return this.dummy.extend(MixinWithExtendedHook);
        });
        subject(function() {
          return this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        return its('otherProperty', function() {
          return should(equal('also irrelevant'));
        });
      });
      return context('with a mixin that define the excluded hook', function() {
        before(function() {
          return this.dummy.extend(MixinWithExcludedClassProperty);
        });
        subject(function() {
          return this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        return its('otherProperty', function() {
          return shouldnt(exist);
        });
      });
    });
    describe('::concern', function() {
      context('with a concern that defines both hooks', function() {
        before(function() {
          return this.dummy.concern(ConcernWithIncludedAndExcluded);
        });
        subject(function() {
          return this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        its('otherProperty', function() {
          return should(equal('also irrelevant'));
        });
        return context('its instance', function() {
          subject(function() {
            return new this.dummy;
          });
          its('property', function() {
            return should(equal('irrelevant'));
          });
          return its('otherProperty', function() {
            return should(equal('also irrelevant'));
          });
        });
      });
      return context('with a concern that defines exclusion for both', function() {
        before(function() {
          return this.dummy.concern(ConcernWithExcludedHook);
        });
        subject(function() {
          return this.dummy;
        });
        its('property', function() {
          return should(equal('irrelevant'));
        });
        its('otherProperty', function() {
          return shouldnt(exist);
        });
        return context('its instance', function() {
          subject(function() {
            return new this.dummy;
          });
          its('otherProperty', function() {
            return should(equal('also irrelevant'));
          });
          return its('property', function() {
            return shouldnt(exist);
          });
        });
      });
    });
    describe('::getter', function() {
      return context('on a child class that overrides an accessor', function() {
        given('Parent', function() {
          var Parent;
          return Parent = (function() {
            function Parent() {}

            Parent.accessor('foo', {
              get: function() {
                return this._foo;
              },
              set: function(value) {
                return this._foo = value;
              }
            });

            return Parent;

          })();
        });
        given('Child', function() {
          var Child, _ref;
          return Child = (function(_super) {
            __extends(Child, _super);

            function Child() {
              _ref = Child.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            Child.getter('foo', function() {
              return 'BAR';
            });

            return Child;

          })(this.Parent);
        });
        subject(function() {
          return new this.Child;
        });
        specify('the child instance getter return', function() {
          return this.subject.foo.should(equal('BAR'));
        });
        return context('the child instance setter called', function() {
          before(function() {
            return this.subject.foo = 'FOO';
          });
          return specify('the private var', function() {
            return expect(this.subject._foo).to(equal('FOO'));
          });
        });
      });
    });
    return describe('::setter', function() {
      return context('on a child class that overrides an accessor', function() {
        given('Parent', function() {
          var Parent;
          return Parent = (function() {
            function Parent() {}

            Parent.accessor('foo', {
              get: function() {
                return 'foo';
              },
              set: function(value) {
                return this._foo = value;
              }
            });

            return Parent;

          })();
        });
        given('Child', function() {
          var Child, _ref;
          return Child = (function(_super) {
            __extends(Child, _super);

            function Child() {
              _ref = Child.__super__.constructor.apply(this, arguments);
              return _ref;
            }

            Child.setter('foo', function() {
              return this._foo = 'BAR';
            });

            return Child;

          })(this.Parent);
        });
        subject(function() {
          return new this.Child;
        });
        specify('the child instance getter return', function() {
          return expect(this.subject.foo).to(equal('foo'));
        });
        return context('the child instance setter called', function() {
          before(function() {
            return this.subject.foo = 'FOO';
          });
          return specify('the private var', function() {
            return expect(this.subject._foo).to(equal('BAR'));
          });
        });
      });
    });
  });

  Dummy = (function() {
    function Dummy() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.args = args;
      this.property = 'value';
    }

    return Dummy;

  })();

  factory('object', {
    "class": Object
  }, function() {
    set('property', function() {
      return 16;
    });
    return trait('trait', function() {
      set('property', function() {
        return 20;
      });
      return set('name', 'irrelevant');
    });
  });

  factory('dummy', {
    "class": Dummy
  }, function() {
    createWith('foo', 'bar');
    trait('with createWith', function() {
      return createWith('bar', 'foo');
    });
    return trait('with createWith function', function() {
      return createWith(function() {
        return ['bar', 'foo'];
      });
    });
  });

  factory('dummy', function() {
    return trait('reopened factory', function() {
      return set('reopened', true);
    });
  });

  factory('dummy2', {
    "extends": 'dummy'
  }, function() {
    createWith('oof', 'rab');
    return set('baz', function() {
      return 42;
    });
  });

  describe(create, function() {
    context('called with nothing', function() {
      return it(function() {
        return should(throwAnError(/no factory name provided/));
      });
    });
    context('called with inexistant factory', function() {
      return it(function() {
        return should(throwAnError(/missing factory foo/)["with"]('foo'));
      });
    });
    context('called with inexistant trait', function() {
      return it(function() {
        return should(throwAnError(/unknown trait foo/)["with"]('dummy', 'foo'));
      });
    });
    context('called with only a factory', function() {
      withArguments('object');
      return itsReturn(function() {
        return should(equal({
          property: 16
        }));
      });
    });
    context('called with a factory and a trait', function() {
      withArguments('object', 'trait');
      return itsReturn(function() {
        return should(equal({
          property: 20,
          name: 'irrelevant'
        }));
      });
    });
    context('called with a factory and an option object', function() {
      withArguments('object', {
        name: 'irrelevant'
      });
      return itsReturn(function() {
        return should(equal({
          property: 16,
          name: 'irrelevant'
        }));
      });
    });
    context('called with a factory that defines constructor arguments', function() {
      withArguments('dummy');
      return itsReturn(function() {
        return should(equal({
          property: 'value',
          args: ['foo', 'bar']
        }));
      });
    });
    context('called with a trait', function() {
      context('that defines constructor arguments', function() {
        withArguments('dummy', 'with createWith');
        return itsReturn(function() {
          return should(equal({
            property: 'value',
            args: ['bar', 'foo']
          }));
        });
      });
      return context('that defines constructor arguments with a function', function() {
        withArguments('dummy', 'with createWith function');
        return itsReturn(function() {
          return should(equal({
            property: 'value',
            args: ['bar', 'foo']
          }));
        });
      });
    });
    return context('called with a trait from a trait defined in a reopened factory', function() {
      withArguments('dummy', 'reopened factory');
      return itsReturn(function() {
        return should(equal({
          property: 'value',
          args: ['foo', 'bar'],
          reopened: true
        }));
      });
    });
  });

  describe(factory, function() {
    return context('when using the extends option', function() {
      return context('the created object', function() {
        subject(function() {
          return create('dummy2');
        });
        it(function() {
          return should(exist);
        });
        return it('inherit from the parent factory', function() {
          return should(equal({
            property: 'value',
            args: ['oof', 'rab'],
            baz: 42
          }));
        });
      });
    });
  });

  runningSpecs('a factory without a class').shouldStopWith(/no class provided/, function() {
    return factory('foo', function() {});
  });

  runningSpecs('a factory extending an unexistant factory').shouldStopWith(/parent factory 'bar' can't be found/, function() {
    return factory('foo', {
      "extends": 'bar'
    }, function() {});
  });

  describe(fixture, function() {
    it(function() {
      return should(exist);
    });
    context('for a json file', function() {
      context('without a name', function() {
        fixture('sample.json');
        subject(function() {
          return this.fixture;
        });
        it(function() {
          return should(exist);
        });
        return it(function() {
          return should(equal({
            string: 'irrelevant',
            object: {
              a: 'aaa',
              b: 'bbb',
              c: 'ccc'
            },
            array: [10, 'foo', true],
            number: 10,
            boolean: true
          }));
        });
      });
      return context('with a name', function() {
        fixture('sample.json', {
          as: 'sample'
        });
        subject(function() {
          return this.sample;
        });
        it(function() {
          return should(exist);
        });
        return it(function() {
          return should(equal({
            string: 'irrelevant',
            object: {
              a: 'aaa',
              b: 'bbb',
              c: 'ccc'
            },
            array: [10, 'foo', true],
            number: 10,
            boolean: true
          }));
        });
      });
    });
    context('for an html file', function() {
      fixture('sample.html');
      specify('the dom', function() {
        return document.querySelector('body').should(haveSelector('#section'));
      });
      return specify('the fixture', function() {
        this.fixture.should(exist);
        return this.fixture.should(haveSelector('article'));
      });
    });
    context('for a dom file', function() {
      fixture('sample.html');
      fixture('sample.dom', {
        as: 'dom'
      });
      subject(function() {
        return this.dom;
      });
      it(function() {
        return should(exist);
      });
      return context('the dom expression', function() {
        subject(function() {
          return document;
        });
        it(function() {
          return shouldnt(match(this.dom));
        });
        it(function() {
          return should(contains(this.dom));
        });
        return context('on a matching element', function() {
          subject(function() {
            return document.querySelector('#fixtures section');
          });
          it(function() {
            return should(match(this.dom));
          });
          return it(function() {
            return shouldnt(contains(this.dom));
          });
        });
      });
    });
    return context('for an unhandled extension', function() {
      fixture('sample.txt');
      subject(function() {
        return this.fixture;
      });
      return it(function() {
        return should(equal('sample\n'));
      });
    });
  });

  describe(be, function() {
    context('when called with a string', function() {
      subject(function() {
        return {
          truthy: true,
          falsy: false,
          isPending: function() {
            return true;
          },
          is_fulfilled: function() {
            return true;
          }
        };
      });
      it(function() {
        return should(be('truthy'));
      });
      it(function() {
        return shouldnt(be('falsy'));
      });
      it(function() {
        return shouldnt(be('inexistant'));
      });
      it(function() {
        return should(be('pending'));
      });
      return it(function() {
        return should(be('fulfilled'));
      });
    });
    return context('when called with an object', function() {
      subject(function() {
        return {};
      });
      it(function() {
        return should(be(this.subject));
      });
      return it(function() {
        return shouldnt(be({}));
      });
    });
  });

  describe(equal, function() {
    context('with strings', function() {
      subject(function() {
        return 'irrelevant';
      });
      it(function() {
        return should(equal('irrelevant'));
      });
      return it(function() {
        return shouldnt(equal('tnavelerri'));
      });
    });
    context('with numbers', function() {
      subject(function() {
        return 10;
      });
      it(function() {
        return should(equal(10));
      });
      it(function() {
        return shouldnt(equal(1));
      });
      return it(function() {
        return shouldnt(equal('10'));
      });
    });
    context('with an object', function() {
      subject(function() {
        return {
          foo: 'bar',
          baz: {
            foo: 10
          }
        };
      });
      it(function() {
        return should(equal({
          foo: 'bar',
          baz: {
            foo: 10
          }
        }));
      });
      it(function() {
        return shouldnt(equal({
          foo: 'baz',
          baz: {
            foo: 6
          }
        }));
      });
      it(function() {
        return shouldnt(equal([10, 'foo']));
      });
      context('that is empty', function() {
        subject(function() {
          return {};
        });
        return it(function() {
          return shouldnt(equal({
            a: 10,
            b: 10,
            c: 10
          }));
        });
      });
      return context('that have an extra property', function() {
        subject(function() {
          return {
            a: 10,
            b: 10,
            c: 10,
            d: 10
          };
        });
        return it(function() {
          return shouldnt(equal({
            a: 10,
            b: 10,
            c: 10
          }));
        });
      });
    });
    return context('with an array', function() {
      subject(function() {
        return [0, 1, 2];
      });
      it(function() {
        return should(equal([0, 1, 2]));
      });
      it(function() {
        return shouldnt(equal([2, 1, 0]));
      });
      context('that is empty', function() {
        subject(function() {
          return [];
        });
        return it(function() {
          return shouldnt(equal([10, 10, 10]));
        });
      });
      return context('that have an extra value', function() {
        subject(function() {
          return [10, 10, 10, 10];
        });
        return it(function() {
          return shouldnt(equal([10, 10, 10]));
        });
      });
    });
  });

  describe(exist, function() {
    context('with something', function() {
      subject(function() {
        return {};
      });
      return it(function() {
        return should(exist);
      });
    });
    context('with nothing', function() {
      subject(function() {
        return void 0;
      });
      return it(function() {
        return shouldnt(exist);
      });
    });
    return context('with a falsy value', function() {
      subject(function() {
        return false;
      });
      return it(function() {
        return should(exist);
      });
    });
  });

  describe(match, function() {
    given('fixturesContainer', function() {
      return document.querySelector('#fixtures');
    });
    subject(function() {
      return 'irrelevant';
    });
    it(function() {
      return should(match(/irrelevant/));
    });
    it(function() {
      return shouldnt(match(/tnavelerri/));
    });
    return context('with a dom object', function() {
      fixture('sample.html');
      fixture('sample.dom', {
        as: 'dom'
      });
      context('on document', function() {
        subject(function() {
          return document;
        });
        return it(function() {
          return shouldnt(match(this.dom));
        });
      });
      context('on a section node', function() {
        subject(function() {
          return this.fixturesContainer.querySelector('section');
        });
        return it(function() {
          return should(match(this.dom));
        });
      });
      return context('on a section nodelist', function() {
        subject(function() {
          return this.fixturesContainer.querySelectorAll('section');
        });
        return it(function() {
          return should(match(this.dom));
        });
      });
    });
  });

  describe(contains, function() {
    given('fixturesContainer', function() {
      return document.querySelector('#fixtures');
    });
    subject(function() {
      return [0, 1, 2, 'foo', 'bar', true];
    });
    it(function() {
      should(contains(0));
      should(contains('foo', true));
      shouldnt(contains(4));
      return shouldnt(contains('foo', false));
    });
    return context('with a dom object', function() {
      fixture('sample.html');
      fixture('sample.dom', {
        as: 'dom'
      });
      context('on document', function() {
        subject(function() {
          return document;
        });
        return it(function() {
          return should(contains(this.dom));
        });
      });
      context('on a section node', function() {
        subject(function() {
          return this.fixturesContainer.querySelector('section');
        });
        return it(function() {
          return shouldnt(contains(this.dom));
        });
      });
      return context('on a section nodelist', function() {
        subject(function() {
          return this.fixturesContainer.querySelectorAll('section');
        });
        return it(function() {
          return shouldnt(contains(this.dom));
        });
      });
    });
  });

  describe(haveBeenCalled, function() {
    given('object', function() {
      return {
        method: function() {
          return 42;
        }
      };
    });
    the(function() {
      return this.object.method.shouldnt(haveBeenCalled);
    });
    return context('on a spied method', function() {
      before(function() {
        return spyOn(this.object, 'method');
      });
      the(function() {
        return this.object.method.shouldnt(haveBeenCalled);
      });
      context('when called', function() {
        before(function() {
          return this.object.method();
        });
        return the(function() {
          return this.object.method.should(haveBeenCalled);
        });
      });
      return context('when called with arguments', function() {
        before(function() {
          return this.object.method(10, 'foo');
        });
        the(function() {
          return this.object.method.shouldnt(haveBeenCalled["with"]('foo', 10));
        });
        return the(function() {
          return this.object.method.should(haveBeenCalled["with"](10, 'foo'));
        });
      });
    });
  });

  describe(throwAnError, function() {
    context('on a function that throw an error', function() {
      subject(function() {
        return function() {
          throw new Error('message');
        };
      });
      it(function() {
        return should(throwAnError());
      });
      it(function() {
        return should(throwAnError(/message/));
      });
      return it(function() {
        return shouldnt(throwAnError(/irrelevant/));
      });
    });
    context('on a function that does not throw an error', function() {
      subject(function() {
        return function() {};
      });
      it(function() {
        return shouldnt(throwAnError());
      });
      return it(function() {
        return shouldnt(throwAnError(/message/));
      });
    });
    return context('on a function that throw with arguments', function() {
      subject(function() {
        return function() {
          if (arguments.length > 0) {
            throw new Error('message');
          }
        };
      });
      it(function() {
        return shouldnt(throwAnError());
      });
      it(function() {
        return shouldnt(throwAnError(/message/));
      });
      it(function() {
        return should(throwAnError()["with"]('an argument'));
      });
      return it(function() {
        return should(throwAnError(/message/)["with"]('an argument').inContext({}));
      });
    });
  });

  describe('have', function() {
    context('on an object with a collection', function() {
      subject(function() {
        return {
          items: [0, 1, 2, 3],
          foo: 'bar'
        };
      });
      it(function() {
        return should(have(4, 'items'));
      });
      it(function() {
        return shouldnt(have(2, 'items'));
      });
      it(function() {
        return shouldnt(have(6, 'children'));
      });
      it(function() {
        return shouldnt(have(2, 'foo'));
      });
      return runningSpecs('error raised in describe').shouldFailWith(/Undefined label in have matcher/, function() {
        subject(function() {
          return {
            items: [0, 1, 2, 3],
            foo: 'bar'
          };
        });
        return it('should throw an error', function() {
          return should(have(2));
        });
      });
    });
    context('on a collection', function() {
      subject(function() {
        return [0, 1, 2, 3];
      });
      it(function() {
        return should(have(4));
      });
      it(function() {
        return should(have(4, 'items'));
      });
      it(function() {
        return should(have(4, 'children'));
      });
      it(function() {
        return shouldnt(have(2));
      });
      return it(function() {
        return shouldnt(have(2, 'items'));
      });
    });
    context('on a string', function() {
      subject(function() {
        return 'string';
      });
      it(function() {
        return should(have(6));
      });
      it(function() {
        return should(have(6, 'chars'));
      });
      return it(function() {
        return shouldnt(have(2, 'chars'));
      });
    });
    return context('on a number', function() {
      subject(function() {
        return 10;
      });
      return it(function() {
        return shouldnt(have(10, 'elements'));
      });
    });
  });

  sharedExample('a collection like object', function(options) {
    var capitalizedSingular, plural, singular;
    singular = options.singular, plural = options.plural;
    capitalizedSingular = spectacular.utils.capitalize(singular);
    return context('adding an item', function() {
      given('item', function() {
        return {};
      });
      given('item2', function() {
        return {};
      });
      before(function() {
        return this.subject["add" + capitalizedSingular](this.item);
      });
      specify('the collection', function() {
        return this.subject[plural].should(contains(this.item));
      });
      specify("then calling has" + capitalizedSingular, function() {
        return this.subject["has" + capitalizedSingular](this.item).should(be(true));
      });
      specify('the item index', function() {
        return this.subject["find" + capitalizedSingular](this.item).should(equal(0));
      });
      specify('the item at index 0', function() {
        return this.subject["" + singular + "At"](0).should(be(this.item));
      });
      context('then removing it', function() {
        before(function() {
          return this.subject["remove" + capitalizedSingular](this.item);
        });
        return specify('the collection', function() {
          return this.subject[plural].shouldnt(contains(this.item));
        });
      });
      return context('removing an inexistant item', function() {
        before(function() {
          return this.subject["remove" + capitalizedSingular](this.item2);
        });
        return specify('the collection', function() {
          return this.subject[plural].should(contains(this.item));
        });
      });
    });
  });

  ClassWithCollection = (function() {
    ClassWithCollection.include(spectacular.HasCollection('children', 'child'));

    function ClassWithCollection() {
      this.children = [];
    }

    return ClassWithCollection;

  })();

  describe(ClassWithCollection, function() {
    subject(function() {
      return new ClassWithCollection;
    });
    return itBehavesLike('a collection like object', {
      singular: 'child',
      plural: 'children'
    });
  });

  describe(spectacular.EventDispatcher, function() {
    given('listener', function() {
      var dummy;
      dummy = {
        foo: function() {}
      };
      spyOn(dummy, 'foo');
      return dummy.foo;
    });
    subject('dispatcher', function() {
      return new spectacular.EventDispatcher;
    });
    return context('when adding a listener', function() {
      before(function() {
        return this.dispatcher.on('event', this.listener);
      });
      specify('calling hasListener("event")', function() {
        return this.dispatcher.hasListener('event').should(be(true));
      });
      context('and then removing it', function() {
        before(function() {
          return this.dispatcher.off('event', this.listener);
        });
        return specify('calling hasListener("event")', function() {
          return this.dispatcher.hasListener('event').should(be(false));
        });
      });
      return context('and then dispatching a message', function() {
        before(function() {
          return this.dispatcher.dispatch({
            name: 'event',
            message: 'message'
          });
        });
        subject(function() {
          return this.listener;
        });
        return specify('the listener', function() {
          return should(haveBeenCalled);
        });
      });
    });
  });

  GlobalizableClass = (function() {
    function GlobalizableClass() {}

    GlobalizableClass.include(spectacular.Globalizable);

    GlobalizableClass.prototype.globalizable = ['test', 'testMethod', 'another_test_method'];

    GlobalizableClass.prototype.test = function() {};

    GlobalizableClass.prototype.testMethod = function() {};

    GlobalizableClass.prototype.another_test_method = function() {};

    return GlobalizableClass;

  })();

  describe(GlobalizableClass, function() {
    subject(function() {
      return new GlobalizableClass;
    });
    return context(' when globalized', function() {
      before(function() {
        return this.subject.globalize();
      });
      after(function() {
        return this.subject.unglobalize();
      });
      return ['test', 'testMethod', 'test_method', 'anotherTestMethod', 'another_test_method'].forEach(function(method) {
        return specify("the globalizable", function() {
          return expect(method, spectacular.global[method]).to(exist);
        });
      });
    });
  });

  describe(spectacular.Promise, function() {
    it(function() {
      return should(exist);
    });
    return whenPass(function() {
      itsInstance(function() {
        return should(exist);
      });
      describe('.unit', function() {
        it(function() {
          return should(exist);
        });
        return whenPass(function() {
          itsReturn(function() {
            return should(exist);
          });
          context('the returned promise', function() {
            subject('promise', function() {
              return spectacular.Promise.unit();
            });
            it(function() {
              return should(be('fulfilled'));
            });
            return its('value', function() {
              return should(equal(0));
            });
          });
          return context('when called with a value', function() {
            subject('promise', function() {
              return spectacular.Promise.unit('foo');
            });
            it(function() {
              return should(be('fulfilled'));
            });
            return its('value', function() {
              return should(equal('foo'));
            });
          });
        });
      });
      describe('.all', function() {
        it(function() {
          return should(exist);
        });
        return whenPass(function() {
          return context('when called with an array of promise', function() {
            withParameters([spectacular.Promise.unit(), spectacular.Promise.unit(), spectacular.Promise.unit()]);
            itsReturn(function() {
              return should(exist);
            });
            return itsReturn(function() {
              return should(be('fulfilled'));
            });
          });
        });
      });
      describe('::isPending', function() {
        return itsReturn(function() {
          return should(equal(true));
        });
      });
      return context('when chained using then', function() {
        given('firstPromise', function() {
          return new spectacular.Promise;
        });
        given('secondPromise', function() {
          return this.firstPromise.then(function() {});
        });
        given('thirdPromise', function() {
          return this.secondPromise.then(function() {});
        });
        context('when the first promise is fulfilled', function() {
          before(function() {
            return this.firstPromise.resolve();
          });
          specify('the secondPromise', function() {
            return this.secondPromise.should(be('fulfilled'));
          });
          return specify('the thirdPromise', function() {
            return this.thirdPromise.should(be('fulfilled'));
          });
        });
        context('when the first promise is rejected', function() {
          before(function() {
            return this.firstPromise.reject('message');
          });
          specify('the secondPromise', function() {
            return this.secondPromise.should(be('rejected'));
          });
          return specify('the thirdPromise', function() {
            return this.thirdPromise.should(be('rejected'));
          });
        });
        return context('and one of the factory return a promise', function() {
          given('firstPromise', function() {
            return new spectacular.Promise;
          });
          given('returnedPromise', function() {
            return new spectacular.Promise;
          });
          given('secondPromise', function() {
            var _this = this;
            return this.firstPromise.then(function() {
              return _this.returnedPromise;
            });
          });
          given('thirdPromise', function() {
            return this.secondPromise.then(function() {});
          });
          context('when the first promise is fulfilled', function() {
            before(function() {
              return this.firstPromise.resolve();
            });
            specify('the secondPromise', function() {
              return this.secondPromise.shouldnt(be('fulfilled'));
            });
            specify('the thirdPromise', function() {
              return this.thirdPromise.should(be('pending'));
            });
            context('and the returned promise is fulfilled', function() {
              before(function() {
                return this.returnedPromise.resolve();
              });
              specify('the secondPromise', function() {
                return this.secondPromise.should(be('fulfilled'));
              });
              return specify('the thirdPromise', function() {
                return this.thirdPromise.should(be('fulfilled'));
              });
            });
            return context('and the returned promise is rejected', function() {
              before(function() {
                return this.returnedPromise.reject('message');
              });
              specify('the secondPromise', function() {
                return this.secondPromise.should(be('rejected'));
              });
              return specify('the thirdPromise', function() {
                return this.thirdPromise.should(be('rejected'));
              });
            });
          });
          return context('when the first promise is rejected', function() {
            before(function() {
              return this.firstPromise.reject('message');
            });
            specify('the secondPromise', function() {
              return this.secondPromise.should(be('rejected'));
            });
            return specify('the thirdPromise', function() {
              return this.thirdPromise.should(be('rejected'));
            });
          });
        });
      });
    });
  });

  if (typeof window !== 'undefined' && ((_ref = window.options) != null ? _ref.server : void 0)) {
    describe('the server', function() {
      return describe('when the source option have been used', function() {
        return specify('the sources content', function() {
          return expect(window.SourceFileContent).to(exist);
        });
      });
    });
  }

  runningSpecs('a valid shared example').shouldSucceedWith(/3 success, 3 assertions/, function() {
    sharedExample('a shared example', function() {
      context('shared context', function() {
        return it(function() {
          return true.should(be(true));
        });
      });
      return it(function() {
        return true.should(be(true));
      });
    });
    return describe('something', function() {
      itBehavesLike('a shared example');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  runningSpecs('two shared example with same name').shouldStopWith(/shared example '.*' already registered/, function() {
    sharedExample('a shared example', function() {});
    return sharedExample('a shared example', function() {});
  });

  runningSpecs('an unregistered sharedExample').shouldStopWith(/shared example '.*' not found/, function() {
    return describe('something', function() {
      itBehavesLike('a shared example');
      return it(function() {
        return true.should(be(true));
      });
    });
  });

  describe('spyOn', function() {
    given('object', function() {
      return {
        method: function() {
          return 42;
        }
      };
    });
    context('used to spy on a method', function() {
      before(function() {
        return this.spy = spyOn(this.object, 'method');
      });
      subject(function() {
        return this.spy;
      });
      context('the returned spy', function() {
        it(function() {
          return should(exist);
        });
        return it(function() {
          return should(be('the object method', this.object.method));
        });
      });
      return context('calling the spied function', function() {
        before(function() {
          this.spy;
          return this.result = this.object.method('foo', 10);
        });
        it('should have registered the passed arguments', function() {
          this.spy.argsForCall.should(equal([['foo', 10]]));
          return this.object.method.argsForCall.should(equal([['foo', 10]]));
        });
        return it('should have called through', function() {
          return this.result.should(be(42));
        });
      });
    });
    describe('::andCallFake', function() {
      return context('used to mock a method', function() {
        before(function() {
          return this.spy = spyOn(this.object, 'method').andCallFake(function() {
            return 0;
          });
        });
        subject(function() {
          return this.spy;
        });
        context('the returned spy', function() {
          it(function() {
            return should(exist);
          });
          return it(function() {
            return should(be('the object method', this.object.method));
          });
        });
        return context('calling the mocked function', function() {
          before(function() {
            this.spy;
            return this.result = this.object.method('foo', 10);
          });
          it('should have registered the passed arguments', function() {
            this.spy.argsForCall.should(equal([['foo', 10]]));
            return this.object.method.argsForCall.should(equal([['foo', 10]]));
          });
          return it('should have called the fake', function() {
            return this.result.should(be(0));
          });
        });
      });
    });
    describe('::andReturns', function() {
      return context('used to mock a method', function() {
        before(function() {
          return this.spy = spyOn(this.object, 'method').andReturns(10);
        });
        subject(function() {
          return this.spy;
        });
        context('the returned spy', function() {
          it(function() {
            return should(exist);
          });
          return it(function() {
            return should(be('the object method', this.object.method));
          });
        });
        return context('calling the mocked function', function() {
          before(function() {
            this.spy;
            return this.result = this.object.method('foo', 10);
          });
          it('should have registered the passed arguments', function() {
            this.spy.argsForCall.should(equal([['foo', 10]]));
            return this.object.method.argsForCall.should(equal([['foo', 10]]));
          });
          return it('should have called the fake', function() {
            return this.result.should(be(10));
          });
        });
      });
    });
    return describe('::andCallThrough', function() {
      return context('used to spy on a method', function() {
        before(function() {
          return this.spy = spyOn(this.object, 'method').andCallThrough(function(res) {
            return res * 2;
          });
        });
        subject(function() {
          return this.spy;
        });
        context('the returned spy', function() {
          it(function() {
            return should(exist);
          });
          return it(function() {
            return should(be('the object method', this.object.method));
          });
        });
        return context('calling the spied function', function() {
          before(function() {
            this.spy;
            return this.result = this.object.method('foo', 10);
          });
          it('should have registered the passed arguments', function() {
            this.spy.argsForCall.should(equal([['foo', 10]]));
            return this.object.method.argsForCall.should(equal([['foo', 10]]));
          });
          return it('should have called the spied method and the block', function() {
            return this.result.should(be(84));
          });
        });
      });
    });
  });

  describe(spectacular.utils.escape, function() {
    return context('called with html content', function() {
      withArguments('<tag>content</tag>');
      return itsReturn(function() {
        return should(equal('&lt;tag&gt;content&lt;/tag&gt;'));
      });
    });
  });

  describe(spectacular.utils.escapeDiff, function() {
    return context('called with html content', function() {
      withArguments('<tag><del>con</del><ins>tent</ins></tag>');
      return itsReturn(function() {
        return should(equal('&lt;tag&gt;<del>con</del><ins>tent</ins>&lt;/tag&gt;'));
      });
    });
  });

  describe(spectacular.utils.unescape, function() {
    return context('called with html content', function() {
      withArguments('&lt;tag&gt;content&lt;/tag&gt;');
      return itsReturn(function() {
        return should(equal('<tag>content</tag>'));
      });
    });
  });

  describe(spectacular.utils.squeeze, function() {
    return context('called with a string several consecutives spaces', function() {
      withArguments('a string    with\n\t   spaces');
      return itsReturn(function() {
        return should(equal('a string with spaces'));
      });
    });
  });

  describe(spectacular.utils.fill, function() {
    context('when called without any arguments', function() {
      return itsReturn(function() {
        return should(equal('    '));
      });
    });
    context('when called with only a length', function() {
      withArguments(10);
      return itsReturn(function() {
        return should(equal('          '));
      });
    });
    return context('when called with both arguments', function() {
      withArguments(10, '0');
      return itsReturn(function() {
        return should(equal('0000000000'));
      });
    });
  });

  describe(spectacular.utils.indent, function() {
    return context('when called with a multiline string', function() {
      withArguments('line1\nline2\nline3');
      return itsReturn(function() {
        return should(equal('    line1\n    line2\n    line3'));
      });
    });
  });

  describe(spectacular.utils.stringDiff, function() {
    context('with null as first argument', function() {
      withArguments(null, 'foo');
      return itsReturn(function() {
        return should(equal(spectacular.utils.ins('foo')));
      });
    });
    return context('with null as second argument', function() {
      withArguments('foo');
      return itsReturn(function() {
        return should(equal(spectacular.utils.del('foo')));
      });
    });
  });

  describe(spectacular.utils.inspect, function() {
    context('when called with a string', function() {
      withArguments('foo');
      return itsReturn(function() {
        return should(equal("'foo'"));
      });
    });
    context('when called with a number', function() {
      withArguments(10);
      return itsReturn(function() {
        return should(equal('10'));
      });
    });
    context('when called with an array', function() {
      withArguments([10, 'foo', true]);
      return itsReturn(function() {
        return should(equal("[\n  10,\n  'foo',\n  true\n]"));
      });
    });
    context('when called with an object', function() {
      withArguments({
        foo: 'bar'
      });
      return itsReturn(function() {
        return should(equal("{\n  foo: 'bar'\n}"));
      });
    });
    context('that contains a circular reference', function() {
      withArguments(function() {
        var o;
        o = {
          foo: 'bar'
        };
        o.bar = o;
        return [o];
      });
      return itsReturn(function() {
        return should(equal("{\n  foo: 'bar',\n  bar: [circular]\n}"));
      });
    });
    context('that contains a circular reference', function() {
      withArguments(function() {
        var o;
        o = {
          foo: 'bar'
        };
        o.bar = {
          foo: o
        };
        return [o];
      });
      return itsReturn(function() {
        return should(equal("{\n  foo: 'bar',\n  bar: {\n    foo: [circular]\n  }\n}"));
      });
    });
    context('when called with null', function() {
      withArguments(null);
      return itsReturn(function() {
        return should(equal("null"));
      });
    });
    context('when called without arguments', function() {
      return itsReturn(function() {
        return should(equal("undefined"));
      });
    });
    return context('when called with a function', function() {
      context('that have a name', function() {
        withArguments(function() {
          var Foo;
          return [
            Foo = (function() {
              function Foo() {}

              return Foo;

            })()
          ];
        });
        return itsReturn(function() {
          return should(equal('Foo'));
        });
      });
      context('that have a user defined name', function() {
        withArguments(function() {
          var f;
          f = function() {};
          f._name = 'foo';
          return [f];
        });
        return itsReturn(function() {
          return should(equal('foo'));
        });
      });
      return context('that does not have a name', function() {
        withArguments(function() {
          return [function() {}];
        });
        return itsReturn(function() {
          return should(equal('function () {}'));
        });
      });
    });
  });

}).call(this);
