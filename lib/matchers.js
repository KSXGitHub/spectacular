// Generated by CoffeeScript 1.6.2
var compare, deef, diff, objectDiff, stringDiff, util;

deef = require('deep-diff');

diff = require('node-diff');

util = require('util');

exports.exist = {
  assert: function(actual, notText) {
    this.description = "should" + notText + " exist";
    this.message = "Expected " + actual + notText + " to exist";
    return actual != null;
  }
};

exports.be = function(state) {
  return {
    assert: function(actual, notText) {
      this.description = "should" + notText + " be " + state;
      this.message = ("Expected " + actual + "." + state + notText + "      to be true but was " + actual[state]).replace(/\s+/g, ' ');
      return actual[state];
    }
  };
};

objectDiff = function(left, right) {
  return 'diff';
};

stringDiff = function(left, right) {
  return 'diff';
};

compare = function(actual, value, matcher, noMessage) {
  var i, k, v, _i, _len;

  if (noMessage == null) {
    noMessage = false;
  }
  switch (typeof actual) {
    case 'object':
      if (Object.prototype.toString.call(actual) === '[object Array]') {
        for (i = _i = 0, _len = actual.length; _i < _len; i = ++_i) {
          v = actual[i];
          if (!compare(v, value[i], matcher, true)) {
            if (!noMessage) {
              matcher.message = "" + matcher.message + "\n\n" + (objectDiff(v, value[i]));
            }
            return false;
          }
        }
        return true;
      } else {
        for (k in actual) {
          v = actual[k];
          if (!compare(v, value[k], matcher, true)) {
            if (!noMessage) {
              matcher.message = "" + matcher.message + "\n\n" + (objectDiff(v, value[k]));
            }
            return false;
          }
        }
        return true;
      }
      break;
    case 'string':
      if (!noMessage) {
        matcher.message = "" + matcher.message + "\n\n" + (stringDiff(v, value[i]));
      }
      return actual === value;
    default:
      return actual === value;
  }
};

exports.equal = function(value) {
  return {
    assert: function(actual, notText) {
      this.description = "should" + notText + " be equal to " + (util.inspect(value));
      this.message = "Expected " + (util.inspect(actual)) + notText + " to be equal to " + (util.inspect(value));
      return compare(actual, value, this);
    }
  };
};
