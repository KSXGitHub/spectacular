// Generated by CoffeeScript 1.6.3
var FILE_RE, addClass, ancestors, currentWindowOnload, defaults, fixNodeHeight, hasClass, k, removeClass, toggleClass, utils, v, wrapNode,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

utils = spectacular.utils;

ancestors = function(node, block) {
  var parent;
  parent = node.parentNode;
  if (hasClass(parent, 'example-group')) {
    block.call(this, parent);
    return ancestors(parent, block);
  }
};

wrapNode = function(node) {
  if (node.length != null) {
    return node;
  } else {
    return [node];
  }
};

hasClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.every.call(nl, function(n) {
    return RegExp("(\\s|^)" + cls + "(\\s|$)").test(n.className);
  });
};

addClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    if (!hasClass(node, cls)) {
      return node.className += " " + cls;
    }
  });
};

removeClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    return node.className = node.className.replace(cls, '');
  });
};

toggleClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    if (hasClass(node, cls)) {
      return removeClass(node, cls);
    } else {
      return addClass(node, cls);
    }
  });
};

fixNodeHeight = function(nl) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    return node.style.height = "" + node.clientHeight + "px";
  });
};

FILE_RE = function() {
  return /(http:\/\/.*\.(js|coffee)):(\d+)(:(\d+))*/g;
};

spectacular.SlidingObject = (function() {
  function SlidingObject(target, container) {
    var body, doc, previousOnScroll,
      _this = this;
    this.target = target;
    this.container = container;
    previousOnScroll = window.onscroll;
    doc = document.documentElement;
    body = document.body;
    window.onscroll = function() {
      var top, topMax, topMin;
      if (previousOnScroll != null) {
        previousOnScroll();
      }
      topMin = _this.getOffset(_this.container);
      topMax = topMin + _this.container.clientHeight - _this.target.clientHeight;
      top = doc && doc.scrollTop || body && body.scrollTop || 0;
      top = Math.min(topMax, Math.max(topMin, top + 100)) - topMin;
      return _this.target.style.top = "" + top + "px";
    };
  }

  SlidingObject.prototype.getOffset = function(node) {
    if (node.nodeName.toLowerCase() === 'body') {
      return node.offsetTop;
    }
    return node.offsetTop + this.getOffset(node.parentNode);
  };

  return SlidingObject;

})();

spectacular.BrowserStackReporter = (function(_super) {
  __extends(BrowserStackReporter, _super);

  BrowserStackReporter.reports = 0;

  function BrowserStackReporter(error, options) {
    this.error = error;
    this.options = options;
    this.id = BrowserStackReporter.reports;
    BrowserStackReporter.reports += 1;
  }

  BrowserStackReporter.prototype.report = function() {
    var line, pre, stack,
      _this = this;
    if (!this.error.stack) {
      return '';
    }
    stack = this.error.stack.split('\n').filter(function(line) {
      return /( at |@)/g.test(line);
    });
    line = stack[0];
    pre = "<pre id='pre_" + this.id + "_source' class='loading'></pre>\n<pre id='pre_" + this.id + "_stack'>" + (this.prepareStack(stack)) + "</pre>";
    this.loadSource(line).then(function(msg) {
      var source, stackLinks;
      source = document.getElementById("pre_" + _this.id + "_source");
      source.innerHTML = msg;
      removeClass(source, 'loading');
      fixNodeHeight(source);
      stackLinks = document.getElementById("pre_" + _this.id + "_stack").querySelectorAll('a');
      return Array.prototype.forEach.call(stackLinks, function(link) {
        return link.onclick = function(e) {
          var linkLine, linkPre;
          e.preventDefault();
          e.stopImmediatePropagation();
          linkPre = link.parentNode.querySelector('pre');
          if (linkPre != null) {
            return toggleClass(linkPre, 'hidden');
          } else {
            linkLine = link.textContent;
            return _this.loadSource(linkLine).then(function(msg) {
              linkPre = document.createElement('pre');
              linkPre.innerHTML = msg;
              return link.parentNode.appendChild(linkPre);
            });
          }
        };
      });
    });
    return pre;
  };

  BrowserStackReporter.prototype.prepareStack = function(stack) {
    stack = stack.map(function(s) {
      return "<span><a href='#' rel='stack'>" + (utils.escape(s)) + "</a></span>";
    });
    return this.formatStack(stack);
  };

  BrowserStackReporter.prototype.loadSource = function(stackLine) {
    var c, column, e, line, match, url, _ref;
    _ref = FILE_RE().exec(stackLine), match = _ref[0], url = _ref[1], e = _ref[2], line = _ref[3], c = _ref[4], column = _ref[5];
    if ((column == null) && (this.error.columnNumber != null)) {
      column = this.error.columnNumber + 1;
    }
    return this.getLines(url, line, column);
  };

  return BrowserStackReporter;

})(spectacular.StackReporter);

spectacular.BrowserReporter = (function() {
  var STATE_CHARS;

  STATE_CHARS = {
    pending: '*',
    skipped: 'x',
    failure: 'F',
    errored: 'E',
    success: '.'
  };

  function BrowserReporter(options) {
    var buttons, controls, html;
    this.options = options;
    this.onResult = __bind(this.onResult, this);
    this.onEnd = __bind(this.onEnd, this);
    this.errorsCounter = 1;
    this.failuresCounter = 1;
    this.errors = [];
    this.failures = [];
    this.skipped = [];
    this.pending = [];
    this.results = [];
    this.examples = [];
    this.reporter = document.createElement('div');
    this.reporter.id = 'reporter';
    addClass(this.reporter, this.options.documentation ? 'documentation' : 'progress');
    this.reporter.innerHTML = "<header>\n  <h1>Spectacular</h1>\n  <h2>" + spectacular.version + "</h2>\n  <aside>\n    <pre></pre>\n    <p></p>\n  </aside>\n</header>\n<section id=\"examples\">\n  <section id=\"controls\">" + (['success', 'pending', 'errored', 'failure', 'skipped'].map(function(k) {
      return "<button class='toggle " + k + "'>" + k + "</button>";
    }).join('\n')) + "\n  </section>\n</section>\n<footer></footer>";
    html = document.querySelector('html');
    buttons = this.reporter.querySelectorAll('button.toggle');
    Array.prototype.forEach.call(buttons, function(button) {
      return button.onclick = function(e) {
        toggleClass(html, "hide-" + button.textContent);
        return toggleClass(button, "off");
      };
    });
    this.examplesContainer = this.reporter.querySelector('#examples');
    this.progress = this.reporter.querySelector('header pre');
    this.counters = this.reporter.querySelector('header p');
    controls = this.reporter.querySelector('#controls');
    this.controlsScroller = new spectacular.SlidingObject(controls, this.examplesContainer);
  }

  BrowserReporter.prototype.onEnd = function(event) {
    var counters, html, runner;
    html = document.querySelector('html');
    runner = event.target;
    window.resultReceived = true;
    window.result = !this.hasFailures();
    if (result) {
      addClass(html, 'success');
    } else {
      addClass(html, 'failure');
    }
    counters = this.counters.querySelector('#counters');
    return counters.innerHTML = "" + counters.innerHTML + ", finished in " + (this.formatDuration(runner.specsStartedAt, runner.specsEndedAt));
  };

  BrowserReporter.prototype.link = function(example, id) {
    var link;
    link = document.createElement('a');
    link.className = example.result.state;
    link.setAttribute('href', "#example_" + id);
    link.setAttribute('title', "#" + id + " " + example.fullDescription);
    link.innerHTML = this.stateChar(example.result.state);
    return link;
  };

  BrowserReporter.prototype.stateChar = function(state) {
    return STATE_CHARS[state];
  };

  BrowserReporter.prototype.onResult = function(event) {
    var example, html;
    html = document.querySelector('html');
    example = event.target;
    this.results.push(example.result);
    this.examples.push(example);
    this.progress.appendChild(this.link(example, this.examples.length));
    this.counters.innerHTML = this.formatCounters();
    switch (example.result.state) {
      case 'pending':
        this.pending.push(example);
        break;
      case 'skipped':
        this.skipped.push(example);
        break;
      case 'errored':
        this.errors.push(example);
        addClass(html, 'hide-success');
        break;
      case 'failure':
        this.failures.push(example);
        addClass(html, 'hide-success');
    }
    if (this.options.verbose) {
      console.log("  test " + example.description + " > " + example.result.state);
    }
    if (this.options.documentation) {
      return this.formatDocumentationExample(example);
    } else {
      return this.formatProgressExample(example);
    }
  };

  BrowserReporter.prototype.formatDocumentationExample = function(example) {
    var a, ancestor, e, elders, ex, id, n, node, parent, pres, reversed, _i, _j, _len, _len1;
    elders = example.ancestors;
    elders.pop();
    reversed = [];
    for (_i = 0, _len = elders.length; _i < _len; _i++) {
      a = elders[_i];
      reversed.unshift(a);
    }
    node = this.examplesContainer;
    n = 0;
    for (_j = 0, _len1 = reversed.length; _j < _len1; _j++) {
      ancestor = reversed[_j];
      id = ancestor.ownDescription.replace(/^[\s\W]+|[\s\W]+$/g, '').replace(/[^\w\d]+/g, '-').toLowerCase();
      if (id === '') {
        continue;
      }
      parent = node;
      node = node.querySelector("#" + id);
      if (node == null) {
        node = document.createElement('section');
        node.id = id;
        node.className = "example-group " + (ancestor.failed ? 'failure' : 'success') + " level" + n;
        node.innerHTML = "<header title='" + ancestor.description + "'>\n  <h3>" + ancestor.ownDescription + "</h3>\n</header>";
        parent.appendChild(node);
      }
      n++;
    }
    id = this.examples.length;
    ex = document.createElement('article');
    ex.id = "example_" + id;
    ex.className = "example " + example.result.state + " level" + n;
    if (ex.dataset != null) {
      ex.dataset.id = id;
    } else {
      ex.setAttribute('data-id', id);
    }
    if (example.result.expectations.length > 0) {
      ex.innerHTML = "<header title='" + example.description + "'>\n  <h4>" + example.ownDescription + "</h4>\n  <span class='result'>" + example.result.state + "</span>\n  <span class='time'><span class='icon-time'></span>" + (example.duration / 1000) + "s</span>\n</header>\n<div class=\"expectations\">\n  " + (((function() {
        var _k, _len2, _ref, _results;
        _ref = example.result.expectations;
        _results = [];
        for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
          e = _ref[_k];
          _results.push(this.formatExpectation(e));
        }
        return _results;
      }).call(this)).join('')) + "\n</div>";
    } else {
      ex.innerHTML = "<header title='" + example.description + "'>\n  <h4>" + example.ownDescription + "</h4>\n  <span class='result'>" + example.result.state + "</span>\n  <span class='time'><span class='icon-time'></span>" + example.duration + "s</span>\n</header>\n" + (example.reason != null ? "<aside>      <pre>" + (utils.escapeDiff(example.reason.message)) + "</pre>      " + (example.reason != null ? this.traceSource(example.reason) : '') + "    </aside>" : '');
    }
    ex.onclick = function() {
      return toggleClass(ex, 'closed');
    };
    node.appendChild(ex);
    if (example.failed) {
      ancestors(ex, function(node) {
        if (hasClass(node, 'success')) {
          removeClass(node, 'success');
          return addClass(node, 'failure');
        }
      });
    }
    pres = ex.querySelectorAll('pre:not([id])');
    Array.prototype.forEach.call(pres, function(node) {
      return fixNodeHeight(node);
    });
    addClass(ex, 'closed');
    return setTimeout((function() {
      return addClass(ex, 'animate');
    }), 100);
  };

  BrowserReporter.prototype.formatProgressExample = function(example) {
    var e, ex, id, pres;
    id = this.examples.length;
    ex = document.createElement('article');
    ex.id = "example_" + id;
    ex.className = "example " + example.result.state;
    ex.dataset.id = id;
    if (example.result.expectations.length > 0) {
      ex.innerHTML = "<header>\n  <h4>" + example.description + "</h4>\n  <span class='result'>" + example.result.state + "</span>\n  <span class='time'><span class='icon-time'></span>" + (example.duration / 1000) + "s</span>\n</header>\n<div class=\"expectations\">\n  " + (((function() {
        var _i, _len, _ref, _results;
        _ref = example.result.expectations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          _results.push(this.formatExpectation(e));
        }
        return _results;
      }).call(this)).join('')) + "\n</div>";
    } else {
      ex.innerHTML = "<header>\n  <h4>" + example.description + "</h4>\n  <span class='result'>" + example.result.state + "</span>\n  <span class='time'><span class='icon-time'></span>" + example.duration + "s</span>\n</header>\n" + (example.reason != null ? "<aside>      <pre>" + (utils.escapeDiff(example.reason.message)) + "</pre>      " + (example.reason != null ? this.traceSource(example.reason) : '') + "    </aside>" : '');
    }
    ex.onclick = function() {
      return toggleClass(ex, 'closed');
    };
    this.examplesContainer.appendChild(ex);
    pres = ex.querySelectorAll('pre:not([id])');
    Array.prototype.forEach.call(pres, function(node) {
      return fixNodeHeight(node);
    });
    addClass(ex, 'closed');
    return setTimeout((function() {
      return addClass(ex, 'animate');
    }), 100);
  };

  BrowserReporter.prototype.formatExpectation = function(expectation) {
    return "<div class=\"expectation " + (expectation.success ? 'success' : 'failure') + "\" title=\"" + expectation.example.description + " " + expectation.description + "\">\n  <h5>" + expectation.description + "</h5>\n  <pre>" + (utils.escapeDiff(expectation.message)) + "</pre>\n  " + (expectation.trace != null ? this.traceSource(expectation.trace) : '') + "\n</div>";
  };

  BrowserReporter.prototype.traceSource = function(error) {
    return (new spectacular.BrowserStackReporter(error, this.options)).report();
  };

  BrowserReporter.prototype.formatCounters = function() {
    var assertions, errored, failures, pending, skipped, success;
    failures = this.failures.length;
    errored = this.errors.length;
    skipped = this.skipped.length;
    pending = this.pending.length;
    success = this.examples.length - failures - errored - pending - skipped;
    assertions = this.results.reduce((function(a, b) {
      return a + b.expectations.length;
    }), 0);
    return "<span id='counters'>    " + (this.formatResults(success, failures, errored, skipped, pending, assertions)) + "    </span>";
  };

  BrowserReporter.prototype.formatResults = function(s, f, e, sk, p, a) {
    var he;
    he = f + e;
    return ("" + (this.formatCount(s, 'success', 'success', this.toggle(he, 'success'))) + ",    " + (this.formatCount(a, 'assertion', 'assertions', this.toggle(he, 'success'))) + ",    " + (this.formatCount(f, 'failure', 'failures', this.toggle(he, 'success', 'failure'))) + ",    " + (this.formatCount(e, 'error', 'errors', this.toggle(e, 'success', 'errored'))) + ",    " + (this.formatCount(sk, 'skipped', 'skipped', this.toggle(sk, 'success', 'skipped'))) + ",    " + (this.formatCount(p, 'pending', 'pending', this.toggle(p, 'success', 'pending')))).replace(/\s+/g, ' ');
  };

  BrowserReporter.prototype.formatCount = function(value, singular, plural, color) {
    var s;
    s = value === 0 ? plural : value === 1 ? singular : plural;
    if (color != null) {
      s = "<span class='" + color + "'>" + value + "</span> " + s;
    } else {
      s = "<span>" + value + "</span> " + s;
    }
    return s;
  };

  BrowserReporter.prototype.toggle = function(value, c1, c2) {
    if (value) {
      return c2;
    } else {
      return c1;
    }
  };

  BrowserReporter.prototype.formatDuration = function(start, end) {
    var duration;
    duration = (end.getTime() - start.getTime()) / 1000;
    duration = "<span class='yellow'>" + (Math.max(0, duration)) + "s</span>";
    return duration;
  };

  BrowserReporter.prototype.hasFailures = function() {
    return this.results.some(function(result) {
      var _ref;
      return (_ref = result.state) === 'failure' || _ref === 'skipped' || _ref === 'errored';
    });
  };

  BrowserReporter.prototype.appendToBody = function() {
    return document.querySelector('body').appendChild(this.reporter);
  };

  return BrowserReporter;

})();

spectacular.BrowserMethods = function(options) {
  var cache, loaders;
  cache = {};
  loaders = {};
  if (options.loadFile == null) {
    options.loadFile = function(file) {
      var listener, promise, req;
      promise = new spectacular.Promise;
      if (file in cache) {
        setTimeout((function() {
          return promise.resolve(cache[file]);
        }), 0);
        return promise;
      }
      if (file in loaders) {
        loaders[file].push(function(data) {
          return promise.resolve(data);
        });
        return promise;
      }
      req = new XMLHttpRequest();
      req.onload = function() {
        var data;
        data = this.responseText;
        return loaders[file].forEach(function(f) {
          return f(data);
        });
      };
      listener = function(data) {
        return promise.resolve(cache[file] = data);
      };
      loaders[file] = [listener];
      req.open('get', file, true);
      req.send();
      return promise;
    };
  }
  if (options.getOriginalSourceFor == null) {
    options.getOriginalSourceFor = function(file, line, column) {
      var fileSource, promise,
        _this = this;
      promise = new spectacular.Promise;
      fileSource = null;
      this.loadFile(this.getSourceURLFor(file)).then(function(source) {
        fileSource = source;
        return _this.loadFile(_this.getSourceMapURLFor(file));
      }).then(function(sourceMap) {
        var consumer, _ref;
        consumer = new window.sourceMap.SourceMapConsumer(sourceMap);
        _ref = consumer.originalPositionFor({
          line: line,
          column: column
        }), line = _ref.line, column = _ref.column;
        return promise.resolve({
          content: fileSource,
          line: line,
          column: column
        });
      }).fail(function() {
        return _this.loadFile(file).then(function(content) {
          return promise.resolve({
            content: content,
            line: line,
            column: column
          });
        });
      });
      return promise;
    };
  }
  if (options.hasSourceMap == null) {
    options.hasSourceMap = function(file) {
      return false;
    };
  }
  if (options.getSourceURLFor == null) {
    options.getSourceURLFor = function(file) {};
  }
  if (options.getSourceMapURLFor == null) {
    return options.getSourceMapURLFor = function(file) {};
  }
};

spectacular.paths = spectacular.paths || [];

spectacular.options = spectacular.options || {};

defaults = {
  coffee: false,
  verbose: false,
  profile: false,
  trace: true,
  longTrace: false,
  showSource: true,
  documentation: false,
  matchersRoot: './specs/support/matchers',
  helpersRoot: './specs/support/helpers',
  fixturesRoot: './specs/support/fixtures',
  noMatchers: false,
  noHelpers: false,
  colors: true,
  random: true,
  seed: null,
  server: false,
  globs: []
};

for (k in defaults) {
  v = defaults[k];
  if (!k in spectacular.options) {
    spectacular.options[k] = v;
  }
}

spectacular.BrowserMethods(spectacular.options);

spectacular.env = new spectacular.Environment(spectacular.options);

spectacular.env.globalize();

spectacular.env.runner.loadStartedAt = new Date();

spectacular.env.runner.paths = spectacular.paths;

window.env = spectacular.env;

currentWindowOnload = window.onload;

window.onload = function() {
  var reporter, s, scripts, _i, _len, _ref;
  if (currentWindowOnload != null) {
    currentWindowOnload();
  }
  utils = spectacular.utils;
  if (spectacular.options.verbose) {
    console.log(utils.indent(utils.inspect(spectacular.options)));
    console.log(utils.indent(utils.inspect(spectacular.paths)));
    console.log('\n  Scripts loaded:');
    scripts = document.querySelectorAll('script[src]');
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      s = scripts[_i];
      console.log("    " + ((_ref = s.attributes.getNamedItem("src")) != null ? _ref.value : void 0));
    }
    console.log('');
  }
  reporter = new spectacular.BrowserReporter(spectacular.options);
  reporter.appendToBody();
  spectacular.env.runner.on('result', reporter.onResult);
  spectacular.env.runner.on('end', reporter.onEnd);
  spectacular.env.runner.loadEndedAt = new Date();
  spectacular.env.runner.specsStartedAt = new Date();
  return spectacular.env.run().fail(function(reason) {
    return console.log(reason);
  });
};
