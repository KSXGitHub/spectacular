// Generated by CoffeeScript 1.6.2
spectacular.BrowserReporter = (function() {
  function BrowserReporter() {
    this.errorsCounter = 1;
    this.failuresCounter = 1;
    this.errors = [];
    this.failures = [];
    this.skipped = [];
    this.pending = [];
    this.results = [];
    this.examples = [];
    this.reporter = $("<div id=\"reporter\">\n  <header>\n    <h1>Spectacular</h1>\n    <p></p>\n  </header>\n  <section id=\"examples\"></section>\n  <footer></footer>\n</div>");
    this.examplesContainer = this.reporter.find('#examples');
    this.progress = this.reporter.find('header p');
  }

  BrowserReporter.prototype.buildResults = function(lstart, lend, sstart, send) {
    var res, result, _i, _len, _ref;

    res = '\n\n';
    _ref = this.results;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      result = _ref[_i];
      switch (result.state) {
        case 'pending':
          this.pending.push(result.example);
          break;
        case 'skipped':
          this.skipped.push(result.example);
          break;
        case 'errored':
          this.errors.push(result.example);
          res += result.example.reason + '\n\n';
          break;
        case 'failure':
          this.failures.push(result.example);
      }
    }
    res += this.formatCounters();
    return res += '\n';
  };

  BrowserReporter.prototype.registerResult = function(example) {
    var e, _ref;

    this.results.push(example.result);
    this.examples.push(example);
    this.progress.append((function() {
      switch (example.result.state) {
        case 'pending':
          return "<a class='pending' href='#example_" + this.examples.length + "'>*</a>";
        case 'skipped':
          return "<a class='skipped' href='#example_" + this.examples.length + "'>x</a>";
        case 'failure':
          return "<a class='failure' href='#example_" + this.examples.length + "'>F</a>";
        case 'errored':
          return "<a class='errored' href='#example_" + this.examples.length + "'>E</a>";
        case 'success':
          return "<a class='success' href='#example_" + this.examples.length + "'>.</a>";
      }
    }).call(this));
    if (example.result.expectations.length > 0) {
      return this.examplesContainer.append("<article class=\"example " + example.result.state + "\" id=\"example_" + this.examples.length + "\">\n  <header>\n    <h4>" + example.description + "</h4>\n  </header>\n  <div class=\"expectations\">\n    " + ((function() {
        var _i, _len, _ref, _results;

        _ref = example.result.expectations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          _results.push(this.formatExpectation(e));
        }
        return _results;
      }).call(this)) + "\n  </div>\n</article>");
    } else {
      return this.examplesContainer.append("<article class=\"example " + example.result.state + "\">\n  <header>\n    <h4>" + example.description + "</h4>\n  </header>\n  <aside>\n    <pre>" + example.reason + "</pre>\n    <pre>" + ((_ref = example.reason) != null ? _ref.stack : void 0) + "</pre>\n  </aside>\n</article>");
    }
  };

  BrowserReporter.prototype.formatExpectation = function(expectation) {
    var _ref;

    return "<div class=\"expectation\">\n  <h5>" + expectation.description + "</h5>\n  <pre>" + expectation.message + "</pre>\n  <pre>" + ((_ref = expectation.trace) != null ? _ref.stack : void 0) + "</pre>\n</div>";
  };

  BrowserReporter.prototype.formatCounters = function() {
    var assertions, errored, failures, pending, skipped, success;

    failures = this.failures.length;
    errored = this.errors.length;
    skipped = this.skipped.length;
    pending = this.pending.length;
    success = this.examples.length - failures - errored - pending - skipped;
    assertions = this.results.reduce((function(a, b) {
      return a + b.expectations.length;
    }), 0);
    return this.formatResults(success, failures, errored, skipped, pending, assertions);
  };

  BrowserReporter.prototype.formatResults = function(s, f, e, sk, p, a) {
    var he;

    he = f + e;
    return "" + (this.formatCount(s, 'success', 'success')) + ", " + (this.formatCount(a, 'assertion', 'assertions')) + ", " + (this.formatCount(f, 'failure', 'failures')) + ", " + (this.formatCount(e, 'error', 'errors')) + ", " + (this.formatCount(sk, 'skipped', 'skipped')) + ", " + (this.formatCount(p, 'pending', 'pending'));
  };

  BrowserReporter.prototype.formatCount = function(value, singular, plural) {
    var s;

    s = "" + value + " " + (value === 0 ? plural : value === 1 ? singular : plural);
    return s;
  };

  BrowserReporter.prototype.hasFailures = function() {
    return this.results.some(function(result) {
      var _ref;

      return (_ref = result.state) === 'failure' || _ref === 'skipped' || _ref === 'errored';
    });
  };

  BrowserReporter.prototype.appendToBody = function() {
    return $('body').append(this.reporter);
  };

  BrowserReporter.prototype.printResults = function(lstart, lend, sstart, send) {};

  return BrowserReporter;

})();

if (!isCommonJS) {
  spectacular.env = new spectacular.Environment(spectacular.BrowserReporter, options);
  spectacular.env.load();
  spectacular.env.runner.loadStartedAt = new Date();
  spectacular.env.runner.paths = paths;
  window.onload = function() {
    spectacular.env.formatter.appendToBody();
    spectacular.env.runner.loadEndedAt = new Date();
    spectacular.env.runner.specsStartedAt = new Date();
    return spectacular.env.run().fail(function(reason) {
      return console.log(reason);
    });
  };
}
