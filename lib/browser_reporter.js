// Generated by CoffeeScript 1.6.3
var BADGE_MAP, CHAR_MAP, COLOR_MAP, addClass, ancestors, buildHTML, currentWindowOnload, defaults, escapeHTML, fixNodeHeight, hasClass, icon, k, removeClass, selfAndAncestors, tag, toggleClass, utils, v, viewerSize, wrapNode, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

spectacular.formatters.browser = {};

spectacular.widgets = {};

_ref = spectacular.formatters, CHAR_MAP = _ref.CHAR_MAP, COLOR_MAP = _ref.COLOR_MAP, BADGE_MAP = _ref.BADGE_MAP;

utils = spectacular.utils;

escapeHTML = function(str) {
  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

selfAndAncestors = function(node, block) {
  block.call(this, node);
  return ancestors(node, block);
};

ancestors = function(node, block) {
  var parent;
  parent = node.parentNode;
  if (hasClass(parent, 'example-group')) {
    block.call(this, parent);
    return ancestors(parent, block);
  }
};

wrapNode = function(node) {
  if (node == null) {
    return [];
  }
  if (node.length != null) {
    return node;
  } else {
    return [node];
  }
};

hasClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.every.call(nl, function(n) {
    return RegExp("(\\s|^)" + cls + "(\\s|$)").test(n.className);
  });
};

addClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    if (!hasClass(node, cls)) {
      return node.className += " " + cls;
    }
  });
};

removeClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    return node.className = node.className.replace(cls, '');
  });
};

toggleClass = function(nl, cls) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    if (hasClass(node, cls)) {
      return removeClass(node, cls);
    } else {
      return addClass(node, cls);
    }
  });
};

fixNodeHeight = function(nl) {
  nl = wrapNode(nl);
  return Array.prototype.forEach.call(nl, function(node) {
    return node.style.height = "" + node.clientHeight + "px";
  });
};

tag = function(tag, inner, attrs, block) {
  var k, node, v, _ref1, _ref2;
  if (inner == null) {
    inner = '';
  }
  if (attrs == null) {
    attrs = {};
  }
  if (typeof inner === 'object') {
    _ref1 = ['', inner, attrs], inner = _ref1[0], attrs = _ref1[1], block = _ref1[2];
  }
  if (typeof inner === 'function') {
    _ref2 = ['', {}, inner], inner = _ref2[0], attrs = _ref2[1], block = _ref2[2];
  }
  if (typeof block === 'function') {
    inner = block();
  }
  node = document.createElement(tag);
  for (k in attrs) {
    v = attrs[k];
    node.setAttribute(k, v);
  }
  if (typeof inner === 'string') {
    node.innerHTML = inner;
  } else {
    node.appendChild(inner);
  }
  return node;
};

buildHTML = function(html) {
  var res;
  res = tag('div', html).children;
  if (res.length === 1) {
    return res[0];
  } else {
    return res;
  }
};

icon = function(icon) {
  return tag('i', {
    "class": "icon-" + icon
  });
};

spectacular.widgets.ExampleViewer = (function() {
  function ExampleViewer() {}

  ExampleViewer.prototype.init = function(runner) {
    this.runner = runner;
    this.container = buildHTML(spectacular.templates.viewer());
    this.view = this.container.querySelector('div');
    return document.body.appendChild(this.container);
  };

  ExampleViewer.prototype.displayCard = function(example) {
    var _this = this;
    this.view.innerHTML = this.getCard(example);
    this.stack = this.view.querySelector('.stack');
    this.expectationMessage = this.view.querySelector('.expectation-message');
    this.expectations = this.view.querySelectorAll('.expectation');
    if (this.expectations.length > 0) {
      return this.each(this.expectations, function(node, i) {
        var expectation, index;
        index = node.attributes['data-expectation'].value;
        expectation = example.result.expectations[index];
        node.onclick = function() {
          return _this.displayExpectationDetails(node, expectation);
        };
        if (i === 0) {
          return _this.displayExpectationDetails(node, expectation);
        }
      });
    } else {
      if (example.result.expectations.length === 0 && example.examplePromise.reason) {
        return this.displayStack(example.examplePromise.reason.stack);
      }
    }
  };

  ExampleViewer.prototype.displayExpectationDetails = function(node, expectation) {
    this.each(this.expectations, function(el) {
      return removeClass(el, 'active');
    });
    this.expectationMessage.textContent = expectation.message;
    this.expectationMessage.setAttribute('class', expectation.success ? 'expectation-message success' : 'expectation-message failure');
    this.clearStack();
    if (expectation.trace != null) {
      this.displayStack(expectation.trace.stack);
    }
    return addClass(node, 'active');
  };

  ExampleViewer.prototype.clearStack = function() {
    return this.stack.innerHTML = '';
  };

  ExampleViewer.prototype.displayStack = function(stack) {
    var parser,
      _this = this;
    parser = new spectacular.errors.ErrorParser(stack);
    return parser.lines.forEach(function(stackLine, i) {
      var column, div, file, line, method, _ref1;
      _ref1 = parser.details(stackLine), file = _ref1.file, line = _ref1.line, column = _ref1.column, method = _ref1.method;
      div = tag('div', function() {
        return tag('a', escapeHTML(stackLine));
      });
      div.onclick = function() {
        if (hasClass(div, 'has-source')) {
          return _this.hideSource(div);
        } else {
          return _this.displayLineSource(div, file, line, column);
        }
      };
      _this.stack.appendChild(div);
      if (i === 0) {
        return _this.displayLineSource(div, file, line, column);
      }
    });
  };

  ExampleViewer.prototype.hideSource = function(div) {
    div.removeChild(div.children[1]);
    return removeClass(div, 'has-source');
  };

  ExampleViewer.prototype.displayLineSource = function(div, file, line, column) {
    var f, w;
    f = new spectacular.formatters.console.ErrorSourceFormatter(this.runner.options, file, line, column);
    w = function(s, c) {
      return "<span class='" + c + "'>" + s + "</span>";
    };
    return f.format().then(function(result) {
      div.appendChild(tag('pre', function() {
        var lines;
        lines = result.replace(/^\n|\n$/g, '').split('\n');
        lines = lines.map(function(line) {
          line = line.replace(/^\s+(\d+\s)*\|/gm, w('$&', 'line-number'));
          return tag('span', line).outerHTML;
        });
        return lines.join('\n');
      }));
      return addClass(div, 'has-source');
    });
  };

  ExampleViewer.prototype.each = function(nodes, block) {
    return Array.prototype.forEach.call(nodes, block);
  };

  ExampleViewer.prototype.getCard = function(example) {
    return spectacular.templates.card({
      example: example
    });
  };

  ExampleViewer.prototype.onStart = function(event) {};

  ExampleViewer.prototype.onResult = function(event) {};

  ExampleViewer.prototype.onEnd = function(event) {};

  return ExampleViewer;

})();

spectacular.widgets.ExamplesList = (function() {
  function ExamplesList() {}

  ExamplesList.prototype.init = function(runner, reporter) {
    var btn, html, openLeft, openRight,
      _this = this;
    this.runner = runner;
    this.reporter = reporter;
    this.examples = [];
    this.container = buildHTML(spectacular.templates.list({
      chars: CHAR_MAP
    }));
    this.list = this.container.querySelector('div');
    this.viewer = this.reporter.widgets.filter(function(w) {
      return w.constructor === spectacular.widgets.ExampleViewer;
    })[0];
    btn = this.container.querySelector('.btn-collapse');
    btn.onclick = function() {
      toggleClass(_this.container, 'collapse');
      if (hasClass(_this.container, 'collapse')) {
        return Array.prototype.forEach.call(_this.list.children, function(el) {
          return addClass(el, 'collapse');
        });
      } else {
        return Array.prototype.forEach.call(_this.list.children, function(el) {
          return removeClass(el, 'collapse');
        });
      }
    };
    html = document.querySelector('html');
    openLeft = this.container.querySelector('.btn-open-left');
    openLeft.onclick = function() {
      if (hasClass(html, 'snapjs-left')) {
        return window.snapper.close();
      } else {
        return window.snapper.open('left');
      }
    };
    openRight = this.container.querySelector('.btn-open-right');
    openRight.onclick = function() {
      if (hasClass(html, 'snapjs-right')) {
        return window.snapper.close();
      } else {
        return window.snapper.open('right');
      }
    };
    return document.body.appendChild(this.container);
  };

  ExamplesList.prototype.onStart = function() {};

  ExamplesList.prototype.onResult = function(event) {
    var example, state;
    example = event.target;
    state = example.result.state;
    if ((state === 'failure' || state === 'errored') && !hasClass(document.body, 'hide-success')) {
      addClass(document.body, 'hide-success');
      this.viewer.displayCard(example);
    }
    return this.buildExample(example);
  };

  ExamplesList.prototype.onEnd = function(event) {};

  ExamplesList.prototype.buildExample = function(example) {
    var node;
    node = this.getParent(example);
    if (example.failed) {
      selfAndAncestors(node, function(node) {
        if (hasClass(node, 'success')) {
          removeClass(node, 'success');
          return addClass(node, 'failure');
        }
      });
    }
    node.appendChild(this.getExample(example));
    return this.examples.push(example);
  };

  ExamplesList.prototype.getExample = function(example) {
    var node, state,
      _this = this;
    state = example.result.state;
    node = tag('article', example.ownDescriptionWithExpectations, {
      "class": "example " + state,
      id: this.examples.length,
      title: example.fullDescription
    });
    node.onclick = function() {
      _this.viewer.displayCard(_this.examples[node.attributes.id.value]);
      return snapper.open('right');
    };
    return node;
  };

  ExamplesList.prototype.getParent = function(example) {
    var a, ancestor, elders, id, n, node, parent, reversed, _i, _j, _len, _len1;
    elders = example.ancestors;
    elders.pop();
    reversed = [];
    for (_i = 0, _len = elders.length; _i < _len; _i++) {
      a = elders[_i];
      reversed.unshift(a);
    }
    node = this.list;
    n = 0;
    for (_j = 0, _len1 = reversed.length; _j < _len1; _j++) {
      ancestor = reversed[_j];
      id = ancestor.ownDescription.replace(/^[\s\W]+|[\s\W]+$/g, '').replace(/[^\w\d]+/g, '-').toLowerCase();
      if (id === '') {
        continue;
      }
      parent = node;
      node = node.querySelector("#" + id);
      if (node == null) {
        node = this.buildParent(ancestor, id, n);
        parent.appendChild(node);
      }
      n++;
    }
    return node;
  };

  ExamplesList.prototype.buildParent = function(ancestor, id, n) {
    var content, header, node;
    content = "<header title='" + ancestor.description + "'>\n" + ancestor.ownDescription + "\n</header>";
    node = tag('section', content, {
      id: id,
      "class": "example-group " + (ancestor.failed ? 'failure' : 'success') + " level" + n
    });
    header = node.querySelector('header');
    header.onclick = function() {
      return toggleClass(node, 'collapse');
    };
    return node;
  };

  return ExamplesList;

})();

spectacular.widgets.RunnerProgress = (function() {
  function RunnerProgress() {}

  RunnerProgress.prototype.init = function(runner, reporter) {
    var state;
    this.runner = runner;
    this.reporter = reporter;
    this.container = buildHTML(spectacular.templates.progress({
      seed: this.runner.options.seed,
      chars: CHAR_MAP
    }));
    this.totalValue = this.container.querySelector('.all .total');
    this.timeValue = this.container.querySelector('.time .value');
    this.allValue = this.container.querySelector('.all .value');
    for (state in CHAR_MAP) {
      this[state + 'Value'] = this.container.querySelector("." + state + " .value");
    }
    return document.body.appendChild(this.container);
  };

  RunnerProgress.prototype.onStart = function() {
    var btn, self, state, _results,
      _this = this;
    this.counters = {
      all: 0,
      failure: 0,
      errored: 0,
      skipped: 0,
      pending: 0,
      success: 0
    };
    this.totalValue.textContent = this.runner.examples.length;
    this.interval = setInterval(function() {
      var t;
      t = new Date(new Date() - _this.runner.specsStartedAt);
      return _this.timeValue.textContent = "" + (t.getSeconds()) + "." + (t.getMilliseconds()) + "s";
    }, 100);
    self = this;
    _results = [];
    for (state in CHAR_MAP) {
      btn = this.container.querySelector("." + state);
      _results.push(btn.onclick = function() {
        return toggleClass(document.body, "hide-" + this.attributes['data-state'].value);
      });
    }
    return _results;
  };

  RunnerProgress.prototype.update = function() {
    var c, key, _results;
    this.allValue.textContent = this.counters.all;
    _results = [];
    for (key in CHAR_MAP) {
      c = CHAR_MAP[key];
      this["" + key + "Value"].textContent = this.counters[key];
      if (this.counters[key] && !hasClass(this[key], 'not-zero')) {
        _results.push(addClass(this[key], 'not-zero'));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  RunnerProgress.prototype.onResult = function(e) {
    var example, _ref1;
    example = e.target;
    this.counters.all++;
    this.counters[example.result.state]++;
    if ((_ref1 = example.result.state) === 'failure' || _ref1 === 'errored') {
      addClass(this.container, 'fail');
    }
    return this.update();
  };

  RunnerProgress.prototype.onEnd = function(e) {
    var results, t;
    clearInterval(this.interval);
    results = e.target;
    t = new Date(results.specsEndedAt - results.specsStartedAt);
    this.timeValue.textContent = "" + (t.getSeconds()) + "." + (t.getMilliseconds()) + "s";
    if (this.counters.failure === 0 && this.counters.errored === 0) {
      return addClass(this.container, 'success');
    } else {
      return addClass(this.container, 'failure');
    }
  };

  return RunnerProgress;

})();

spectacular.SlidingObject = (function() {
  function SlidingObject(target, container) {
    var body, doc, previousOnScroll,
      _this = this;
    this.target = target;
    this.container = container;
    previousOnScroll = window.onscroll;
    doc = document.documentElement;
    body = document.body;
    window.onscroll = function() {
      var top, topMax, topMin;
      if (previousOnScroll != null) {
        previousOnScroll();
      }
      topMin = _this.getOffset(_this.container);
      topMax = topMin + _this.container.clientHeight - _this.target.clientHeight;
      top = doc && doc.scrollTop || body && body.scrollTop || 0;
      top = Math.min(topMax, Math.max(topMin, top + 100)) - topMin;
      return _this.target.style.top = "" + top + "px";
    };
  }

  SlidingObject.prototype.getOffset = function(node) {
    if (node.nodeName.toLowerCase() === 'body') {
      return node.offsetTop;
    }
    return node.offsetTop + this.getOffset(node.parentNode);
  };

  return SlidingObject;

})();

spectacular.BrowserReporter = (function() {
  function BrowserReporter(runner, widgets) {
    this.runner = runner;
    this.widgets = widgets;
    this.onEnd = __bind(this.onEnd, this);
    this.onResult = __bind(this.onResult, this);
    this.onStart = __bind(this.onStart, this);
    this.options = this.runner.options;
    this.registerEvents();
  }

  BrowserReporter.prototype.registerEvents = function() {
    this.runner.on('start', this.onStart);
    this.runner.on('result', this.onResult);
    return this.runner.on('end', this.onEnd);
  };

  BrowserReporter.prototype.unregisterEvents = function() {
    this.runner.off('start', this.onStart);
    this.runner.off('result', this.onResult);
    return this.runner.off('end', this.onEnd);
  };

  BrowserReporter.prototype.init = function() {
    var _this = this;
    return this.widgets.forEach(function(w) {
      return w.init(_this.runner, _this);
    });
  };

  BrowserReporter.prototype.onStart = function(e) {
    var _this = this;
    return this.widgets.forEach(function(w) {
      return w.onStart(e);
    });
  };

  BrowserReporter.prototype.onResult = function(e) {
    return this.widgets.forEach(function(w) {
      return w.onResult(e);
    });
  };

  BrowserReporter.prototype.onEnd = function(e) {
    return this.widgets.forEach(function(w) {
      return w.onEnd(e);
    });
  };

  return BrowserReporter;

})();

spectacular.BrowserMethods = function(options) {
  var cache, loaders;
  cache = {};
  loaders = {};
  if (options.loadFile == null) {
    options.loadFile = function(file) {
      var listener, promise, req;
      promise = new spectacular.Promise;
      if (file in cache) {
        setTimeout((function() {
          return promise.resolve(cache[file]);
        }), 0);
        return promise;
      }
      if (file in loaders) {
        loaders[file].push(function(data) {
          return promise.resolve(data);
        });
        return promise;
      }
      req = new XMLHttpRequest();
      req.onload = function() {
        var data;
        data = this.responseText;
        return loaders[file].forEach(function(f) {
          return f(data);
        });
      };
      listener = function(data) {
        return promise.resolve(cache[file] = data);
      };
      loaders[file] = [listener];
      req.open('get', file, true);
      req.send();
      return promise;
    };
  }
  if (options.getOriginalSourceFor == null) {
    options.getOriginalSourceFor = function(file, line, column) {
      var fileSource, promise,
        _this = this;
      promise = new spectacular.Promise;
      fileSource = null;
      this.loadFile(this.getSourceURLFor(file)).then(function(source) {
        fileSource = source;
        return _this.loadFile(_this.getSourceMapURLFor(file));
      }).then(function(sourceMap) {
        var consumer, _ref1;
        consumer = new window.sourceMap.SourceMapConsumer(sourceMap);
        _ref1 = consumer.originalPositionFor({
          line: line,
          column: column
        }), line = _ref1.line, column = _ref1.column;
        return promise.resolve({
          content: fileSource,
          line: line,
          column: column
        });
      }).fail(function() {
        return _this.loadFile(file).then(function(content) {
          return promise.resolve({
            content: content,
            line: line,
            column: column
          });
        });
      });
      return promise;
    };
  }
  if (options.hasSourceMap == null) {
    options.hasSourceMap = function(file) {
      return false;
    };
  }
  if (options.getSourceURLFor == null) {
    options.getSourceURLFor = function(file) {};
  }
  if (options.getSourceMapURLFor == null) {
    return options.getSourceMapURLFor = function(file) {};
  }
};

spectacular.paths = spectacular.paths || [];

spectacular.options = spectacular.options || {};

defaults = {
  coffee: false,
  verbose: false,
  profile: false,
  trace: true,
  longTrace: false,
  showSource: true,
  format: 'progress',
  matchersRoot: './specs/support/matchers',
  helpersRoot: './specs/support/helpers',
  fixturesRoot: './specs/support/fixtures',
  noMatchers: false,
  noHelpers: false,
  colors: true,
  random: true,
  seed: null,
  server: false,
  globs: []
};

for (k in defaults) {
  v = defaults[k];
  if (!k in spectacular.options) {
    spectacular.options[k] = v;
  }
}

spectacular.BrowserMethods(spectacular.options);

spectacular.env = new spectacular.Environment(spectacular.options);

spectacular.env.globalize();

spectacular.env.runner.loadStartedAt = new Date();

viewerSize = function() {
  return Math.min(document.body.clientWidth - 60, 500);
};

window.env = spectacular.env;

currentWindowOnload = window.onload;

window.onload = function() {
  var previousOnResize, reporter, s, scripts, _i, _len, _ref1;
  if (currentWindowOnload != null) {
    currentWindowOnload();
  }
  utils = spectacular.utils;
  if (spectacular.options.verbose) {
    console.log(utils.indent(utils.inspect(spectacular.options)));
    console.log(utils.indent(utils.inspect(spectacular.paths)));
    console.log('\n  Scripts loaded:');
    scripts = document.querySelectorAll('script[src]');
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      s = scripts[_i];
      console.log("    " + ((_ref1 = s.attributes.getNamedItem("src")) != null ? _ref1.value : void 0));
    }
    console.log('');
  }
  reporter = new spectacular.BrowserReporter(spectacular.env.runner, [new spectacular.widgets.RunnerProgress, new spectacular.widgets.ExamplesList, new spectacular.widgets.ExampleViewer]);
  reporter.init();
  spectacular.env.runner.loadEndedAt = new Date();
  spectacular.env.runner.specsStartedAt = new Date();
  spectacular.env.run().fail(function(reason) {
    return console.log(reason.stack);
  });
  window.snapper = new Snap({
    element: document.getElementById('examples'),
    minPosition: -viewerSize()
  });
  document.getElementById('viewer').setAttribute('style', "width: " + (viewerSize()) + "px;");
  snapper.open('left');
  previousOnResize = document.body.onresize;
  return document.body.onresize = function() {
    snapper.close();
    snapper.settings({
      minPosition: -viewerSize()
    });
    return document.getElementById('viewer').setAttribute('style', "width: " + (viewerSize()) + "px;");
  };
};
