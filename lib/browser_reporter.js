// Generated by CoffeeScript 1.6.2
var cache, utils,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

utils = spectacular.utils;

spectacular.StackReporter = (function() {
  StackReporter.reports = 0;

  StackReporter.files = {};

  StackReporter.filesLoader = {};

  function StackReporter(error, options) {
    this.error = error;
    this.options = options;
    this.id = StackReporter.reports;
    StackReporter.reports += 1;
  }

  StackReporter.prototype.report = function() {
    var c, column, e, line, match, pre, stack, url, _ref,
      _this = this;

    if (!this.error.stack) {
      return '';
    }
    pre = "<pre id='pre_" + this.id + "' class='loading'></pre>";
    stack = this.error.stack.split('\n').filter(function(line) {
      return /( at |@)/g.test(line);
    });
    line = stack.shift();
    _ref = /(http:\/\/.*\.(js|coffee)):(\d+)(:(\d+))*/g.exec(line), match = _ref[0], url = _ref[1], e = _ref[2], line = _ref[3], c = _ref[4], column = _ref[5];
    this.options.loadFile(url).then(function(data) {
      $("#pre_" + _this.id).html(_this.getLines(data, line, column)).removeClass('loading');
      return $("#pre_" + _this.id).height($("#pre_" + _this.id).height());
    });
    return pre;
  };

  StackReporter.prototype.getLines = function(fileContent, line, column) {
    var endLine, lines, startLine,
      _this = this;

    line = parseInt(line);
    fileContent = fileContent.split('\n').map(function(l, i) {
      return " " + (utils.padRight(i + 1)) + " | " + l;
    });
    if (column != null) {
      this.insertColumnLine(fileContent, line, column);
    }
    startLine = Math.max(1, line - 3) - 1;
    endLine = Math.min(fileContent.length, line + 2) - 1;
    fileContent[line - 1] = "<span class='line'>" + fileContent[line - 1] + "</span>";
    lines = fileContent.slice(startLine, +endLine + 1 || 9e9).join('\n');
    return lines;
  };

  StackReporter.prototype.insertColumnLine = function(content, line, column) {
    column = parseInt(column);
    if (line === content.length) {
      return content.push(line);
    } else {
      return content.splice(line, 0, "      |" + (utils.padRight('^', column)));
    }
  };

  return StackReporter;

})();

spectacular.BrowserReporter = (function() {
  var STATE_CHARS;

  STATE_CHARS = {
    pending: '*',
    skipped: 'x',
    failure: 'F',
    errored: 'E',
    success: '.'
  };

  function BrowserReporter(options) {
    this.options = options;
    this.onResult = __bind(this.onResult, this);
    this.onEnd = __bind(this.onEnd, this);
    this.errorsCounter = 1;
    this.failuresCounter = 1;
    this.errors = [];
    this.failures = [];
    this.skipped = [];
    this.pending = [];
    this.results = [];
    this.examples = [];
    this.reporter = $("<div id=\"reporter\">\n  <header>\n    <h1>Spectacular</h1>\n    <h2>" + spectacular.version + "</h2>\n    <pre></pre>\n    <p></p>\n  </header>\n  <section id=\"controls\">" + (['success', 'pending', 'errored', 'failure', 'skipped'].map(function(k) {
      return "<button class='toggle " + k + "'>" + k + "</button>";
    }).join('\n')) + "</section>\n  <section id=\"examples\"></section>\n  <footer></footer>\n</div>");
    this.reporter.find('button').click(function(e) {
      var button;

      button = $(e.target);
      $('html').toggleClass("hide-" + (button.text()));
      return button.toggleClass("off");
    });
    this.examplesContainer = this.reporter.find('#examples');
    this.progress = this.reporter.find('header pre');
    this.counters = this.reporter.find('header p');
  }

  BrowserReporter.prototype.onEnd = function(event) {
    var runner;

    runner = event.target;
    window.resultReceived = true;
    window.result = !this.hasFailures();
    if (result) {
      $('html').addClass('success');
    } else {
      $('html').addClass('failure');
    }
    return this.counters.find('#counters').append(", finished in " + (this.formatDuration(runner.specsStartedAt, runner.specsEndedAt)));
  };

  BrowserReporter.prototype.link = function(example, id) {
    return "<a href='#example_" + id + "'\n   class='" + example.result.state + "'\n   title='" + example.description + "'\n>" + (this.stateChar(example.result.state)) + "</a>";
  };

  BrowserReporter.prototype.stateChar = function(state) {
    return STATE_CHARS[state];
  };

  BrowserReporter.prototype.onResult = function(event) {
    var e, ex, example, _ref;

    example = event.target;
    this.results.push(example.result);
    this.examples.push(example);
    this.progress.append(this.link(example, this.examples.length));
    this.counters.html(this.formatCounters());
    switch (example.result.state) {
      case 'pending':
        this.pending.push(example);
        break;
      case 'skipped':
        this.skipped.push(example);
        break;
      case 'errored':
        this.errors.push(example);
        break;
      case 'failure':
        this.failures.push(example);
    }
    if (example.result.expectations.length > 0) {
      ex = $("<article class=\"example preload " + example.result.state + "\" id=\"example_" + this.examples.length + "\">\n  <header>\n    <h4>" + example.description + "</h4>\n    <span class='result'>" + example.result.state + "</span>\n    <span class='time'><span class='icon-time'></span>" + (example.duration / 1000) + "s</span>\n  </header>\n  <div class=\"expectations\">\n    " + (((function() {
        var _i, _len, _ref, _results;

        _ref = example.result.expectations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          _results.push(this.formatExpectation(e));
        }
        return _results;
      }).call(this)).join('')) + "\n  </div>\n</article>");
    } else {
      ex = $("<article class=\"example preload " + example.result.state + "\" id=\"example_" + this.examples.length + "\">\n  <header>\n    <h4>" + example.description + "</h4>\n    <span class='result'>" + example.result.state + "</span>\n    <span class='time'><span class='icon-time'></span>" + example.duration + "s</span>\n  </header>\n  <aside>\n    <pre>" + (utils.escape(example.reason.message)) + "</pre>\n    " + (example.reason != null ? this.traceSource(example.reason) : '') + "\n    " + (example.reason != null ? "<pre>" + (utils.escape((_ref = example.reason) != null ? _ref.stack : void 0)) + "</pre>" : '') + "\n  </aside>\n</article>");
    }
    ex.click(function() {
      return ex.toggleClass('closed');
    });
    this.examplesContainer.append(ex);
    ex.find('pre:not([id])').each(function() {
      return $(this).height($(this).height());
    });
    ex.addClass('closed');
    return ex.removeClass('preload');
  };

  BrowserReporter.prototype.formatExpectation = function(expectation) {
    var _ref;

    return "<div class=\"expectation " + (expectation.success ? 'success' : 'failure') + "\">\n  <h5>" + expectation.description + "</h5>\n  <pre>" + (utils.escape(expectation.message)) + "</pre>\n  " + (expectation.trace != null ? this.traceSource(expectation.trace) : '') + "\n  " + (expectation.trace != null ? "<pre>" + (utils.escape((_ref = expectation.trace) != null ? _ref.stack : void 0)) + "</pre>" : '') + "\n</div>";
  };

  BrowserReporter.prototype.traceSource = function(error) {
    return (new spectacular.StackReporter(error, this.options)).report();
  };

  BrowserReporter.prototype.formatCounters = function() {
    var assertions, errored, failures, pending, skipped, success;

    failures = this.failures.length;
    errored = this.errors.length;
    skipped = this.skipped.length;
    pending = this.pending.length;
    success = this.examples.length - failures - errored - pending - skipped;
    assertions = this.results.reduce((function(a, b) {
      return a + b.expectations.length;
    }), 0);
    return "<span id='counters'>    " + (this.formatResults(success, failures, errored, skipped, pending, assertions)) + "    </span>";
  };

  BrowserReporter.prototype.formatResults = function(s, f, e, sk, p, a) {
    var he;

    he = f + e;
    return ("" + (this.formatCount(s, 'success', 'success', this.toggle(he, 'success'))) + ",    " + (this.formatCount(a, 'assertion', 'assertions', this.toggle(he, 'success'))) + ",    " + (this.formatCount(f, 'failure', 'failures', this.toggle(he, 'success', 'failure'))) + ",    " + (this.formatCount(e, 'error', 'errors', this.toggle(e, 'success', 'errored'))) + ",    " + (this.formatCount(sk, 'skipped', 'skipped', this.toggle(sk, 'success', 'skipped'))) + ",    " + (this.formatCount(p, 'pending', 'pending', this.toggle(p, 'success', 'pending')))).replace(/\s+/g, ' ');
  };

  BrowserReporter.prototype.formatCount = function(value, singular, plural, color) {
    var s;

    s = value === 0 ? plural : value === 1 ? singular : plural;
    if (color != null) {
      s = "<span class='" + color + "'>" + value + "</span>Â " + s;
    } else {
      s = "<span>" + value + "</span> " + s;
    }
    return s;
  };

  BrowserReporter.prototype.toggle = function(value, c1, c2) {
    if (value) {
      return c2;
    } else {
      return c1;
    }
  };

  BrowserReporter.prototype.formatDuration = function(start, end) {
    var duration;

    duration = (end.getTime() - start.getTime()) / 1000;
    duration = "<span class='yellow'>" + (Math.max(0, duration)) + "s</span>";
    return duration;
  };

  BrowserReporter.prototype.hasFailures = function() {
    return this.results.some(function(result) {
      var _ref;

      return (_ref = result.state) === 'failure' || _ref === 'skipped' || _ref === 'errored';
    });
  };

  BrowserReporter.prototype.appendToBody = function() {
    return $('body').append(this.reporter);
  };

  return BrowserReporter;

})();

if (!isCommonJS) {
  cache = {};
  options.loadFile = function(file) {
    var promise;

    promise = new spectacular.Promise;
    if (file in cache) {
      promise.resolve(cache[file]);
      return promise;
    }
    $.ajax({
      url: file,
      success: function(data) {
        return promise.resolve(cache[file] = data);
      },
      dataType: 'html'
    });
    return promise;
  };
  spectacular.env = new spectacular.Environment(options);
  spectacular.env.load();
  spectacular.env.runner.loadStartedAt = new Date();
  spectacular.env.runner.paths = paths;
  window.onload = function() {
    var reporter;

    reporter = new spectacular.BrowserReporter(options);
    reporter.appendToBody();
    spectacular.env.runner.on('result', reporter.onResult);
    spectacular.env.runner.on('end', reporter.onEnd);
    spectacular.env.runner.loadEndedAt = new Date();
    spectacular.env.runner.specsStartedAt = new Date();
    return spectacular.env.run().fail(function(reason) {
      return console.log(reason);
    });
  };
}
