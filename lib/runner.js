// Generated by CoffeeScript 1.6.2
var nextTick,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

nextTick = (typeof process !== "undefined" && process !== null ? process.setImmediate : void 0) || (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) || function(callback) {
  return setTimeout(callback, 0);
};

spectacular.Runner = (function() {
  function Runner(root, options, env, formatter) {
    this.root = root;
    this.options = options;
    this.env = env;
    this.formatter = formatter;
    this.printResults = __bind(this.printResults, this);
    this.nextExample = __bind(this.nextExample, this);
    this.executeSpecs = __bind(this.executeSpecs, this);
    this.register = __bind(this.register, this);
    this.registerSpecs = __bind(this.registerSpecs, this);
    this.run = __bind(this.run, this);
    this.results = [];
    this.examples = [];
    this.stack = [];
  }

  Runner.prototype.run = function() {
    var promise,
      _this = this;

    return promise = spectacular.Promise.unit().then(function() {
      return _this.specsStartedAt = new Date();
    }).then(this.registerSpecs).then(this.executeSpecs).then(function() {
      return _this.specsEndedAt = new Date();
    }).then(this.printResults).then(function() {
      if (_this.hasFailures()) {
        return 1;
      } else {
        return 0;
      }
    });
  };

  Runner.prototype.findSpecFileInStack = function(stack) {
    var i, l, p, _i, _j, _len, _len1, _ref;

    _ref = this.paths;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      for (i = _j = 0, _len1 = stack.length; _j < _len1; i = ++_j) {
        l = stack[i];
        if (__indexOf.call(l, p) >= 0) {
          return i;
        }
      }
    }
    return -1;
  };

  Runner.prototype.registerSpecs = function() {
    var example, _i, _len, _ref, _results;

    _ref = this.root.allExamples;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      example = _ref[_i];
      _results.push(this.register(example));
    }
    return _results;
  };

  Runner.prototype.register = function(example) {
    this.handleDependencies(example);
    if (__indexOf.call(this.stack, example) < 0) {
      return this.stack.push(example);
    }
  };

  Runner.prototype.handleDependencies = function(example) {
    var cascading, cascadingSucceed, dep, dependencies, dependenciesSucceed, dependency, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

    if (__indexOf.call(this.stack, example) >= 0) {
      return;
    }
    dependencies = [];
    cascading = null;
    dependenciesSucceed = null;
    cascadingSucceed = null;
    if (example.dependencies.length > 0) {
      _ref = example.dependencies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dep = _ref[_i];
        dependency = this.root.identifiedExamplesMap[dep];
        if (dependency != null) {
          this.checkDependency(example, dependency);
          dependencies.push(dependency);
          if (dependency.children != null) {
            _ref1 = dependency.allExamples;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              s = _ref1[_j];
              this.register(s);
            }
          } else {
            this.register(dependency);
          }
        } else {
          throw new Error("unmet dependency " + dep + " for example " + example);
        }
      }
      dependenciesSucceed = function() {
        return dependencies.every(function(e) {
          return e.succeed;
        });
      };
    }
    if (example.cascading != null) {
      _ref2 = example.cascading.examples;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        s = _ref2[_k];
        this.register(s);
      }
      cascadingSucceed = function() {
        return example.cascading.examplesSuceed;
      };
    }
    if (dependenciesSucceed != null) {
      if (cascadingSucceed != null) {
        return example.dependenciesMet = function() {
          return dependenciesSucceed() && cascadingSucceed();
        };
      } else {
        return example.dependenciesMet = dependenciesSucceed;
      }
    } else if (cascadingSucceed != null) {
      return example.dependenciesMet = cascadingSucceed;
    }
  };

  Runner.prototype.checkDependency = function(example, dependency) {
    if (__indexOf.call(example.ancestors, dependency) >= 0) {
      throw new Error("" + example + " can't depends on ancestor " + dependency);
    }
    return this.checkCircularity(example, dependency);
  };

  Runner.prototype.checkCircularity = function(example, dependency) {
    var currentParents, dep, depParents, id, _i, _j, _len, _len1, _ref, _results;

    currentParents = example.identifiedAncestors.map(function(a) {
      return a.options.id;
    });
    depParents = dependency.identifiedAncestors.map(function(a) {
      return a.options.id;
    }).concat(dependency.options.id);
    for (_i = 0, _len = currentParents.length; _i < _len; _i++) {
      id = currentParents[_i];
      if (__indexOf.call(depParents, id) >= 0) {
        throw new Error("circular dependencies between " + example + " and " + dependency);
      }
    }
    if (dependency.dependencies.length > 0) {
      _ref = dependency.dependencies;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        dep = _ref[_j];
        dependency = this.root.identifiedExamplesMap[dep];
        if (dependency != null) {
          _results.push(this.checkCircularity(example, dependency));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Runner.prototype.executeSpecs = function() {
    var promise;

    promise = new spectacular.Promise;
    this.nextExample(promise);
    return promise;
  };

  Runner.prototype.nextExample = function(defer) {
    var _this = this;

    return nextTick(function() {
      var nextExample;

      if (_this.stack.length === 0) {
        return defer.resolve();
      } else {
        nextExample = _this.stack.shift();
        _this.env.currentExample = nextExample;
        return nextExample.run().then(function() {
          _this.registerResults(nextExample);
          return _this.nextExample(defer);
        }).fail(function(reason) {
          _this.registerResults(nextExample);
          return _this.nextExample(defer);
        });
      }
    });
  };

  Runner.prototype.registerResults = function(example) {
    this.env.currentExample = null;
    return this.formatter.registerResult(example);
  };

  Runner.prototype.printResults = function() {
    return this.formatter.printResults(this.loadStartedAt, this.loadEndedAt, this.specsStartedAt, this.specsEndedAt);
  };

  Runner.prototype.hasFailures = function() {
    return this.formatter.hasFailures();
  };

  return Runner;

})();
