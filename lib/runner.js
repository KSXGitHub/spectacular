// Generated by CoffeeScript 1.6.2
var Q, Runner, formatters, fs, glob, nextTick, path, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

require('colors');

Q = require('q');

fs = require('fs');

glob = require('glob');

path = require('path');

util = require('util');

formatters = require('./formatters');

nextTick = process.setImmediate || process.nextTick || function(callback) {
  return setTimeout(callback, 0);
};

Runner = (function() {
  function Runner(root, options, env) {
    this.root = root;
    this.options = options;
    this.env = env;
    this.printResults = __bind(this.printResults, this);
    this.nextExample = __bind(this.nextExample, this);
    this.executeSpecs = __bind(this.executeSpecs, this);
    this.register = __bind(this.register, this);
    this.registerSpecs = __bind(this.registerSpecs, this);
    this.loadSpecs = __bind(this.loadSpecs, this);
    this.globPaths = __bind(this.globPaths, this);
    this.run = __bind(this.run, this);
    this.results = [];
    this.examples = [];
    this.stack = [];
    this.formatter = new formatters.ResultsFormatter(this.root, this.options);
  }

  Runner.prototype.run = function() {
    var promise,
      _this = this;

    return promise = this.globPaths().then(function(paths) {
      _this.loadStartedAt = new Date();
      return paths;
    }).then(this.loadSpecs).then(function() {
      _this.loadEndedAt = new Date();
      return _this.specsStartedAt = new Date();
    }).then(this.registerSpecs).then(this.executeSpecs).then(function() {
      return _this.specsEndedAt = new Date();
    }).then(this.printResults).then(function() {
      if (_this.hasFailures()) {
        return 1;
      } else {
        return 0;
      }
    });
  };

  Runner.prototype.globPaths = function() {
    var p,
      _this = this;

    return Q.all((function() {
      var _i, _len, _ref, _results;

      _ref = this.options.globs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(this.glob(p));
      }
      return _results;
    }).call(this)).then(function(results) {
      var paths;

      paths = [];
      results.forEach(function(a) {
        return paths = paths.concat(a);
      });
      return paths;
    });
  };

  Runner.prototype.glob = function(path) {
    var defer;

    defer = Q.defer();
    glob(path, function(err, res) {
      if (err) {
        return defer.reject(err);
      }
      return defer.resolve(res);
    });
    return defer.promise;
  };

  Runner.prototype.loadSpecs = function(paths) {
    var p, _i, _len, _results;

    if (this.options.verbose) {
      console.log("Load specs: " + paths);
    }
    console.log('');
    _results = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      p = paths[_i];
      _results.push(require(path.resolve('.', p)));
    }
    return _results;
  };

  Runner.prototype.registerSpecs = function() {
    var example, _i, _len, _ref, _results;

    _ref = this.root.allExamples;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      example = _ref[_i];
      _results.push(this.register(example));
    }
    return _results;
  };

  Runner.prototype.register = function(example) {
    if (example.dependencies.length > 0) {
      this.handleDependencies(example);
    }
    if (this.stack.indexOf(example) === -1) {
      return this.stack.push(example);
    }
  };

  Runner.prototype.handleDependencies = function(example) {
    var dep, dependency, deps, s, _i, _j, _len, _len1, _ref, _ref1;

    deps = [];
    _ref = example.dependencies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dep = _ref[_i];
      dependency = this.root.identifiedExamplesMap[dep];
      if (dependency != null) {
        this.checkDependency(example, dependency);
        deps.push(dependency);
        if (dependency.children != null) {
          _ref1 = dependency.allExamples;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            s = _ref1[_j];
            this.register(s);
          }
        } else {
          this.register(dependency);
        }
      } else {
        throw new Error("unmet dependencicy " + dep + " for example " + example);
      }
    }
    return example.dependenciesMet = function() {
      return deps.every(function(e) {
        return e.succeed;
      });
    };
  };

  Runner.prototype.checkDependency = function(example, dependency) {
    if (__indexOf.call(example.ancestors, dependency) >= 0) {
      throw new Error("" + example + " can't depends on ancestor " + dependency);
    }
    return this.checkCircularity(example, dependency);
  };

  Runner.prototype.checkCircularity = function(example, dependency) {
    var currentParents, dep, depParents, id, _i, _j, _len, _len1, _ref, _results;

    currentParents = example.identifiedAncestors.map(function(a) {
      return a.options.id;
    });
    depParents = dependency.identifiedAncestors.map(function(a) {
      return a.options.id;
    }).concat(dependency.options.id);
    for (_i = 0, _len = currentParents.length; _i < _len; _i++) {
      id = currentParents[_i];
      if (__indexOf.call(depParents, id) >= 0) {
        throw new Error("circular dependencies between " + example + " and " + dependency);
      }
    }
    if (dependency.dependencies.length > 0) {
      _ref = dependency.dependencies;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        dep = _ref[_j];
        dependency = this.root.identifiedExamplesMap[dep];
        if (dependency != null) {
          _results.push(this.checkCircularity(example, dependency));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Runner.prototype.executeSpecs = function() {
    var defer;

    defer = Q.defer();
    this.nextExample(defer);
    return defer.promise;
  };

  Runner.prototype.nextExample = function(defer) {
    var _this = this;

    return nextTick(function() {
      var nextExample;

      if (_this.stack.length === 0) {
        return defer.resolve();
      } else {
        nextExample = _this.stack.shift();
        _this.env.currentExample = nextExample;
        return nextExample.run().then(function() {
          _this.registerResults(nextExample);
          return _this.nextExample(defer);
        }).fail(function(reason) {
          _this.registerResults(nextExample);
          return _this.nextExample(defer);
        });
      }
    });
  };

  Runner.prototype.registerResults = function(example) {
    this.env.currentExample = null;
    return this.formatter.registerResult(example);
  };

  Runner.prototype.printResults = function() {
    return this.formatter.printResults(this.loadStartedAt, this.loadEndedAt, this.specsStartedAt, this.specsEndedAt);
  };

  Runner.prototype.hasFailures = function() {
    return this.formatter.hasFailures();
  };

  return Runner;

})();

module.exports = Runner;
