// Generated by CoffeeScript 1.6.2
var Q, ResultsFormatter, Runner, fs, loadHelpers, loadMatchers, loadSpectacular, m, path, requireIntoGlobal, vm, walk;

m = require('module');

fs = require('fs');

vm = require('vm');

Q = require('q');

path = require('path');

walk = require('walkdir');

Runner = require('./runner');

ResultsFormatter = require('./formatters').ResultsFormatter;

requireIntoGlobal = function(file) {
  var k, matchers, v, _results;

  matchers = require(file);
  _results = [];
  for (k in matchers) {
    v = matchers[k];
    _results.push(global[k] = v);
  }
  return _results;
};

loadSpectacular = function(options) {
  return Q.fcall(function() {
    ['factories', 'extensions', 'mixins', 'promises', 'examples', 'environment'].forEach(function(file) {
      var filename, src;

      filename = path.resolve(__dirname, "" + file + ".js");
      src = fs.readFileSync(filename);
      return vm.runInThisContext(src, filename);
    });
    return spectacular.env = new spectacular.Environment(Runner, ResultsFormatter, options);
  });
};

loadMatchers = function(options) {
  var defer, emitter;

  defer = Q.defer();
  if (options.noMatchers) {
    defer.resolve();
  } else {
    emitter = walk(options.matchersRoot);
    emitter.on('file', function(path, stat) {
      return requireIntoGlobal(path);
    });
    emitter.on('end', function() {
      return defer.resolve();
    });
  }
  return defer.promise;
};

loadHelpers = function(options) {
  var defer, emitter;

  defer = Q.defer();
  if (options.noHelpers) {
    defer.resolve();
  } else {
    emitter = walk(options.helpersRoot);
    emitter.on('file', function(path, stat) {
      return requireIntoGlobal(path);
    });
    emitter.on('end', function() {
      return defer.resolve();
    });
  }
  return defer.promise;
};

exports.run = function(options) {
  return loadSpectacular(options).then(function() {
    return requireIntoGlobal('./matchers');
  }).then(loadMatchers(options)).then(loadHelpers(options)).then(function() {
    return spectacular.env.run();
  }).fail(function(reason) {
    console.log(spectacular.env.formatter.errorBadge("Spectacular failed"));
    return spectacular.env.formatter.printError(reason);
  });
};
