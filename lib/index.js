// Generated by CoffeeScript 1.6.2
var Q, ResultsFormatter, Runner, fs, glob, globPath, globPaths, loadHelpers, loadMatchers, loadSpecs, loadSpectacular, m, path, requireIntoGlobal, vm, walk;

m = require('module');

fs = require('fs');

glob = require('glob');

path = require('path');

vm = require('vm');

Q = require('q');

require('colors');

walk = require('walkdir');

Runner = require('./runner');

ResultsFormatter = require('./formatters').ResultsFormatter;

requireIntoGlobal = function(file) {
  var k, matchers, v, _results;

  matchers = require(file);
  _results = [];
  for (k in matchers) {
    v = matchers[k];
    if (typeof v === 'function') {
      v._name = k;
    }
    _results.push(global[k] = v);
  }
  return _results;
};

loadSpectacular = function(options) {
  return Q.fcall(function() {
    ['factories', 'extensions', 'mixins', 'promises', 'examples', 'environment'].forEach(function(file) {
      var filename, src;

      filename = path.resolve(__dirname, "" + file + ".js");
      src = fs.readFileSync(filename).toString();
      return vm.runInThisContext(src, filename);
    });
    return spectacular.env = new spectacular.Environment(Runner, ResultsFormatter, options);
  }).then(function() {
    return spectacular.env.load();
  });
};

loadMatchers = function(options) {
  var defer, emitter;

  defer = Q.defer();
  if (options.noMatchers) {
    defer.resolve();
  } else {
    emitter = walk(options.matchersRoot);
    emitter.on('file', function(path, stat) {
      return requireIntoGlobal(path);
    });
    emitter.on('end', function() {
      return defer.resolve();
    });
  }
  return defer.promise;
};

loadHelpers = function(options) {
  var defer, emitter;

  defer = Q.defer();
  if (options.noHelpers) {
    defer.resolve();
  } else {
    emitter = walk(options.helpersRoot);
    emitter.on('file', function(path, stat) {
      return requireIntoGlobal(path);
    });
    emitter.on('end', function() {
      return defer.resolve();
    });
  }
  return defer.promise;
};

globPath = function(path) {
  var defer;

  defer = Q.defer();
  glob(path, function(err, res) {
    if (err) {
      return defer.reject(err);
    }
    return defer.resolve(res);
  });
  return defer.promise;
};

globPaths = function(options) {
  return function() {
    var p,
      _this = this;

    return Q.all((function() {
      var _i, _len, _ref, _results;

      _ref = options.globs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(globPath(p));
      }
      return _results;
    })()).then(function(results) {
      var paths;

      paths = [];
      results.forEach(function(a) {
        return paths = paths.concat(a);
      });
      return paths;
    });
  };
};

loadSpecs = function(options) {
  return function(paths) {
    var p, _i, _len;

    if (options.verbose) {
      console.log("Load specs: " + paths + "\n");
    }
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      p = paths[_i];
      require(path.resolve('.', p));
    }
    return paths;
  };
};

exports.run = function(options) {
  var loadEndedAt, loadStartedAt;

  loadStartedAt = null;
  loadEndedAt = null;
  return loadSpectacular(options).then(function() {
    return requireIntoGlobal('./matchers');
  }).then(loadMatchers(options)).then(loadHelpers(options)).then(function() {
    return loadStartedAt = new Date();
  }).then(globPaths(options)).then(loadSpecs(options)).then(function(paths) {
    loadEndedAt = new Date();
    spectacular.env.runner.loadStartedAt = loadStartedAt;
    spectacular.env.runner.loadEndedAt = loadEndedAt;
    spectacular.env.runner.paths = paths;
    return spectacular.env.run();
  }).fail(function(reason) {
    if (spectacular.env != null) {
      console.log(spectacular.env.formatter.errorBadge("Spectacular failed"));
      return console.log(spectacular.env.formatter.formatError(reason));
    } else {
      return console.log(reason.stack);
    }
  });
};
