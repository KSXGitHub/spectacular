// Generated by CoffeeScript 1.6.2
var __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

String.prototype.capitalize = function() {
  return this.replace(/^(\w)/, function(m, c) {
    return c.toUpperCase();
  });
};

Function.prototype.include = function() {
  var excluded, k, mixin, mixins, v, _i, _len, _ref;

  mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  excluded = ['constructor'];
  for (_i = 0, _len = mixins.length; _i < _len; _i++) {
    mixin = mixins[_i];
    _ref = mixin.prototype;
    for (k in _ref) {
      v = _ref[k];
      if (__indexOf.call(excluded, k) < 0) {
        this.prototype[k] = v;
      }
    }
    if (typeof mixin.included === "function") {
      mixin.included(this);
    }
  }
  return this;
};

Function.prototype.extend = function() {
  var excluded, k, mixin, mixins, v, _i, _len;

  mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  excluded = ['name', 'prototype'];
  for (_i = 0, _len = mixins.length; _i < _len; _i++) {
    mixin = mixins[_i];
    for (k in mixin) {
      v = mixin[k];
      if (__indexOf.call(excluded, k) < 0) {
        this[k] = v;
      }
    }
    if (typeof mixin.extended === "function") {
      mixin.extended(this);
    }
  }
  return this;
};

Function.prototype.signature = function() {
  var re, _ref;

  re = /^function(\s+[a-zA-Z_][a-zA-Z0-9_]*)*\s*\(([^\)]+)\)/;
  return ((_ref = re.exec(this.toString())) != null ? _ref[2].split(/\s*,\s*/) : void 0) || [];
};

Function.prototype.getter = function(name, block) {
  return Object.defineProperty(this.prototype, name, {
    get: block,
    configurable: true,
    enumerable: true
  });
};

Function.prototype.setter = function(name, block) {
  return Object.defineProperty(this.prototype, name, {
    set: block,
    configurable: true,
    enumerable: true
  });
};

Function.prototype.accessor = function(name, options) {
  return Object.defineProperty(this.prototype, name, {
    get: options.get,
    get: options.set,
    configurable: true,
    enumerable: true
  });
};
