// Generated by CoffeeScript 1.6.2
var currentExample, currentExampleGroup, notInsideIt, notOutsideIt, rootExampleGroup,
  __slice = [].slice;

rootExampleGroup = new spectacular.ExampleGroup;

currentExampleGroup = rootExampleGroup;

currentExample = null;

notInsideIt = function(method) {
  if (currentExample != null) {
    throw new Error("" + method + " called inside a it block");
  }
};

notOutsideIt = function(method) {
  if (currentExample == null) {
    throw new Error("" + method + " called outside a it block");
  }
};

spectacular.fail = function() {
  throw new Error('Failed');
};

spectacular.pending = function() {
  return currentExample.pending();
};

spectacular.skip = function() {
  return currentExample.skip();
};

spectacular.success = function() {};

spectacular.it = function(msgOrBlock, block) {
  var _ref;

  notInsideIt('it');
  if (typeof msgOrBlock === 'function') {
    _ref = ['', msgOrBlock], msgOrBlock = _ref[0], block = _ref[1];
  }
  return currentExampleGroup.addChild(new spectacular.Example(block, msgOrBlock, currentExampleGroup));
};

spectacular.xit = function(msgOrBlock, block) {
  notInsideIt('xit');
  if (typeof msgOrBlock === 'string') {
    return it(msgOrBlock, function() {
      return pending();
    });
  } else {
    return it(function() {
      return pending();
    });
  }
};

spectacular.before = function(block) {
  notInsideIt('before');
  return currentExampleGroup.ownBeforeHooks.push(block);
};

spectacular.after = function(block) {
  notInsideIt('after');
  return currentExampleGroup.ownAfterHooks.push(block);
};

spectacular.its = function(property, block) {
  var parentSubjectBlock;

  notInsideIt('its');
  parentSubjectBlock = currentExampleGroup.subjectBlock;
  return spectacular.context("" + property + " property", function() {
    spectacular.subject(property, function() {
      return typeof parentSubjectBlock === "function" ? parentSubjectBlock()[property] : void 0;
    });
    return spectacular.it(block);
  });
};

spectacular.itsInstance = function(block) {
  return notInsideIt('itsInstance');
};

spectacular.itsReturn = function(block) {
  var parentSubjectBlock;

  notInsideIt('itsReturn');
  parentSubjectBlock = currentExampleGroup.subjectBlock;
  return spectacular.context('returned value', function() {
    spectacular.subject('returnedValue', function() {
      return typeof parentSubjectBlock === "function" ? parentSubjectBlock().apply(this, this.parameters || []) : void 0;
    });
    return spectacular.it(block);
  });
};

spectacular.subject = function(name, block) {
  var _ref;

  notInsideIt('subject');
  if (typeof name === 'function') {
    _ref = [block, name], name = _ref[0], block = _ref[1];
  }
  currentExampleGroup.ownSubjectBlock = block;
  if (name != null) {
    return spectacular.given(name, block);
  }
};

spectacular.given = function(name, block) {
  notInsideIt('given');
  return spectacular.before(function() {
    return Object.defineProperty(this, name, {
      configurable: true,
      enumerable: true,
      get: block
    });
  });
};

spectacular.describe = function(subject, options, block) {
  var oldGroup, _ref;

  if (typeof options === 'function') {
    _ref = [block, options], options = _ref[0], block = _ref[1];
  }
  notInsideIt('describe');
  oldGroup = currentExampleGroup;
  currentExampleGroup = new spectacular.ExampleGroup(block, subject, oldGroup, options);
  oldGroup.addChild(currentExampleGroup);
  currentExampleGroup.executeBlock();
  return currentExampleGroup = oldGroup;
};

spectacular.xdescribe = function(subject, block) {
  return notInsideIt('xdescribe');
};

spectacular.context = spectacular.describe;

spectacular.xcontext = spectacular.xdescribe;

spectacular.withParameters = function() {
  var args;

  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  notInsideIt('withParameters');
  return spectacular.given('parameters', function() {
    return args;
  });
};

spectacular.dependsOn = function(spec) {
  return currentExampleGroup.ownDependencies.push(spec);
};

Object.defineProperty(Object.prototype, 'should', {
  writable: true,
  enumerable: false,
  value: function(matcher) {
    notOutsideIt('should');
    return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, this, matcher, false));
  }
});

Object.defineProperty(Object.prototype, 'shouldnt', {
  writable: true,
  enumerable: false,
  value: function(matcher) {
    notOutsideIt('should');
    return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, this, matcher, true));
  }
});

spectacular.should = function(matcher, neg) {
  if (neg == null) {
    neg = false;
  }
  notOutsideIt('should');
  return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, currentExample.subject, matcher, neg));
};

spectacular.shouldnt = function(matcher) {
  return should(matcher, true);
};

'it xit describe xdescribe context xcontext\
  before after given subject its itsInstance\
  itsReturn withParameters fail pending success\
  skip should shouldnt dependsOn\
'.split(/\s+/g).forEach(function(k) {
  return global[k] = spectacular[k];
});
