// Generated by CoffeeScript 1.6.2
var after, before, context, currentExample, currentExampleGroup, describe, fail, given, it, its, itsInstance, itsReturn, notInsideIt, notOutsideIt, pending, rootExampleGroup, should, skip, spectacular, subject, success, withParameters, xcontext, xdescribe, xit,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

spectacular = spectacular || {};

String.prototype.capitalize = function() {
  return this.replace(/^(\w)/, function(m, c) {
    return c.toUpperCase();
  });
};

Function.prototype.include = function() {
  var excluded, k, mixin, mixins, v, _i, _len, _ref;

  mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  excluded = ['constructor'];
  for (_i = 0, _len = mixins.length; _i < _len; _i++) {
    mixin = mixins[_i];
    _ref = mixin.prototype;
    for (k in _ref) {
      v = _ref[k];
      if (__indexOf.call(excluded, k) < 0) {
        this.prototype[k] = v;
      }
    }
    if (typeof mixin.included === "function") {
      mixin.included(this);
    }
  }
  return this;
};

Function.prototype.extend = function() {
  var excluded, k, mixin, mixins, v, _i, _len;

  mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  excluded = ['name', 'prototype'];
  for (_i = 0, _len = mixins.length; _i < _len; _i++) {
    mixin = mixins[_i];
    for (k in mixin) {
      v = mixin[k];
      if (__indexOf.call(excluded, k) < 0) {
        this[k] = v;
      }
    }
    if (typeof mixin.extended === "function") {
      mixin.extended(this);
    }
  }
  return this;
};

Function.prototype.signature = function() {
  var re, _ref;

  re = /^function(\s+[a-zA-Z_][a-zA-Z0-9_]*)*\s*\(([^\)]+)\)/;
  return ((_ref = re.exec(this.toString())) != null ? _ref[2].split(/\s*,\s*/) : void 0) || [];
};

Function.prototype.getter = function(name, block) {
  return Object.defineProperty(this.prototype, name, {
    get: block,
    configurable: true,
    enumerable: true
  });
};

Function.prototype.setter = function(name, block) {
  return Object.defineProperty(this.prototype, name, {
    set: block,
    configurable: true,
    enumerable: true
  });
};

Function.prototype.accessor = function(name, options) {
  return Object.defineProperty(this.prototype, name, {
    get: options.get,
    get: options.set,
    configurable: true,
    enumerable: true
  });
};

spectacular.HasAncestors = (function() {
  function HasAncestors() {}

  HasAncestors.prototype.ancestors = function() {
    var ancestors, parent;

    ancestors = [];
    parent = this.parent;
    while (parent) {
      ancestors.push(parent);
      parent = parent.parent;
    }
    return ancestors;
  };

  return HasAncestors;

})();

spectacular.HasCollection = function(plural, singular) {
  var ConcreteHasCollection, capitalizedPlural, capitalizedSingular, mixin;

  capitalizedSingular = singular.capitalize();
  capitalizedPlural = plural.capitalize();
  mixin = ConcreteHasCollection = (function() {
    function ConcreteHasCollection() {}

    ConcreteHasCollection.included = function(ctor) {
      return ctor["" + plural + "Scope"] = function(name, block) {
        return ctor.getter(name, function() {
          return this[plural].filter(block);
        });
      };
    };

    return ConcreteHasCollection;

  })();
  mixin.prototype["add" + capitalizedSingular] = function() {
    var item, items, _i, _len, _results;

    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      if (__indexOf.call(this[plural], item) < 0) {
        _results.push(this[plural].push(item));
      }
    }
    return _results;
  };
  mixin.prototype["remove" + capitalizedSingular] = function() {
    var item, items, newArray, _i, _len, _ref;

    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    newArray = [];
    _ref = this[plural];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (__indexOf.call(items, item) < 0) {
        newArray.push(item);
      }
    }
    return this[plural] = newArray;
  };
  mixin.prototype["" + singular + "At"] = function(index) {
    return this[plural][index];
  };
  mixin.prototype["find" + capitalizedSingular] = mixin.prototype["indexOf" + capitalizedSingular] = function(item) {
    return this[plural].indexOf(item);
  };
  mixin.prototype["has" + capitalizedSingular] = mixin.prototype["contains" + capitalizedSingular] = function(item) {
    return this[plural].indexOf(item) !== -1;
  };
  mixin.prototype["" + plural + "Length"] = mixin.prototype["" + plural + "Size"] = mixin.prototype["" + plural + "Count"] = function() {
    return this[plural].length;
  };
  return mixin;
};

spectacular.HasNestedCollection = function(name, options) {
  var ConcreteHasNestedCollection, mixin, through;

  if (options == null) {
    options = {};
  }
  through = options.through;
  if (through == null) {
    throw new Error('missing through option');
  }
  mixin = ConcreteHasNestedCollection = (function() {
    function ConcreteHasNestedCollection() {}

    ConcreteHasNestedCollection.included = function(ctor) {
      ctor["" + name + "Scope"] = function(scopeName, block) {
        return ctor.getter(scopeName, function() {
          return this[name].filter(block);
        });
      };
      return ctor.getter(name, function() {
        var items;

        items = [];
        this[through].forEach(function(item) {
          items.push(item);
          if (item[name] != null) {
            return items = items.concat(item[name]);
          }
        });
        return items;
      });
    };

    return ConcreteHasNestedCollection;

  })();
  return mixin;
};

spectacular.FollowUpProperty = function(property) {
  var ConcreteFollowUpProperty, capitalizedProperty, privateProperty;

  capitalizedProperty = property.capitalize();
  privateProperty = "own" + capitalizedProperty;
  return ConcreteFollowUpProperty = (function() {
    function ConcreteFollowUpProperty() {}

    ConcreteFollowUpProperty.included = function(ctor) {
      return ctor.getter(property, function() {
        var _ref;

        return this[privateProperty] || ((_ref = this.parent) != null ? _ref[property] : void 0);
      });
    };

    return ConcreteFollowUpProperty;

  })();
};

spectacular.MergeUpProperty = function(property) {
  var ConcreteMergeUpProperty, capitalizedProperty, privateProperty;

  capitalizedProperty = property.capitalize();
  privateProperty = "own" + capitalizedProperty;
  return ConcreteMergeUpProperty = (function() {
    function ConcreteMergeUpProperty() {}

    ConcreteMergeUpProperty.included = function(ctor) {
      return ctor.getter(property, function() {
        var a;

        a = this[privateProperty];
        if (this.parent != null) {
          a = this.parent[property].concat(a);
        }
        return a;
      });
    };

    return ConcreteMergeUpProperty;

  })();
};

spectacular.Describable = (function() {
  function Describable() {}

  Describable.included = function(ctor) {
    return ctor.getter('description', function() {
      var space, _ref;

      if (((_ref = this.parent) != null ? _ref.description : void 0) != null) {
        space = '';
        if (!this.noSpaceBeforeDescription) {
          space = ' ';
        }
        return "" + this.parent.description + space + this.ownDescription;
      } else {
        return this.ownDescription;
      }
    });
  };

  return Describable;

})();

spectacular.Promise = (function() {
  Promise.unit = function() {
    var promise;

    promise = new spectacular.Promise;
    promise.resolve(0);
    return promise;
  };

  Promise.all = function(promises) {
    var promise, results, solved;

    promise = new spectacular.Promise;
    solved = 0;
    results = [];
    promises.forEach(function(p) {
      return p.then(function(value) {
        solved++;
        results[promises.indexOf(p)] = value;
        if (solved === promises.length) {
          return promise.resolve(results);
        }
      }).fail(function(reason) {
        return promise.reject(reason);
      });
    });
    return promise;
  };

  function Promise() {
    this.pending = true;
    this.fulfilled = null;
    this.value = void 0;
    this.fulfilledHandlers = [];
    this.errorHandlers = [];
    this.progressHandlers = [];
  }

  Promise.prototype.isPending = function() {
    return this.pending;
  };

  Promise.prototype.isFulfilled = function() {
    return !this.pending && this.fulfilled;
  };

  Promise.prototype.isRejected = function() {
    return !this.pending && !this.fulfilled;
  };

  Promise.prototype.then = function(fulfilledHandler, errorHandler, progressHandler) {
    var e, f, promise;

    promise = new spectacular.Promise;
    f = function(value) {
      if (typeof fulfilledHandler === "function") {
        fulfilledHandler(value);
      }
      return promise.resolve(value);
    };
    e = function(reason) {
      if (typeof errorHandler === "function") {
        errorHandler(reason);
      }
      return promise.reject(reason);
    };
    if (this.pending) {
      this.fulfilledHandlers.push(f);
      this.errorHandlers.push(e);
      if (progressHandler != null) {
        this.progressHandlers.push(progressHandler);
      }
    } else {
      if (this.fulfilled) {
        f(this.value);
      } else {
        e(this.reason);
      }
    }
    return promise;
  };

  Promise.prototype.fail = function(errorHandler) {
    return this.then((function() {}), errorHandler);
  };

  Promise.prototype.resolve = function(value) {
    this.value = value;
    if (!this.pending) {
      return;
    }
    this.fulfilled = true;
    this.notifyHandlers();
    return this.pending = false;
  };

  Promise.prototype.reject = function(reason) {
    this.reason = reason;
    if (!this.pending) {
      return;
    }
    this.fulfilled = false;
    this.notifyHandlers();
    return this.pending = false;
  };

  Promise.prototype.notifyHandlers = function() {
    var handler, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;

    if (!this.pending) {
      return;
    }
    if (this.fulfilled) {
      _ref = this.fulfilledHandlers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler(this.value));
      }
      return _results;
    } else {
      _ref1 = this.errorHandlers;
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        handler = _ref1[_j];
        _results1.push(handler(this.reason));
      }
      return _results1;
    }
  };

  return Promise;

})();

spectacular.AsyncExamplePromise = (function(_super) {
  __extends(AsyncExamplePromise, _super);

  function AsyncExamplePromise() {
    this.run = __bind(this.run, this);    this.interval = null;
    this.timeout = 5000;
    this.message = 'Timed out';
    AsyncExamplePromise.__super__.constructor.call(this);
  }

  AsyncExamplePromise.prototype.run = function() {
    var lastTime,
      _this = this;

    lastTime = new Date();
    return this.interval = setInterval(function() {
      if (new Date() - lastTime >= _this.timeout) {
        clearInterval(_this.interval);
        return _this.reject(new Error(_this.message));
      }
    }, 10);
  };

  AsyncExamplePromise.prototype.resolve = function(value) {
    clearInterval(this.interval);
    return AsyncExamplePromise.__super__.resolve.call(this, value);
  };

  AsyncExamplePromise.prototype.rejectAfter = function(timeout, message) {
    this.timeout = timeout;
    this.message = message;
  };

  return AsyncExamplePromise;

})(spectacular.Promise);

spectacular.Expectation = (function() {
  function Expectation(example, actual, matcher, not) {
    var e;

    this.example = example;
    this.actual = actual;
    this.matcher = matcher;
    this.not = not != null ? not : false;
    try {
      if (this.matcher.assert(this.actual, this.not ? ' not' : '')) {
        if (this.not) {
          this.success = false;
        } else {
          this.success = true;
        }
      } else {
        if (this.not) {
          this.success = true;
        } else {
          this.success = false;
        }
      }
    } catch (_error) {
      e = _error;
      this.success = false;
    }
    this.message = this.matcher.message;
    this.description = "" + this.example.description + " " + this.matcher.description;
  }

  return Expectation;

})();

spectacular.ExampleResult = (function() {
  function ExampleResult(example, state) {
    this.example = example;
    this.state = state;
    this.expectations = [];
  }

  ExampleResult.prototype.hasFailures = function() {
    return this.expectations.some(function(e) {
      return !e.success;
    });
  };

  return ExampleResult;

})();

spectacular.Example = (function() {
  Example.include(spectacular.HasAncestors, spectacular.Describable, spectacular.FollowUpProperty('subjectBlock'), spectacular.MergeUpProperty('beforeHooks'), spectacular.MergeUpProperty('afterHooks'));

  function Example(block, ownDescription, parent) {
    this.block = block;
    this.ownDescription = ownDescription != null ? ownDescription : '';
    this.parent = parent;
    if (this.ownDescription === '') {
      this.noSpaceBeforeDescription = true;
    }
    this.ownBeforeHooks = [];
    this.ownAfterHooks = [];
  }

  Example.getter('subject', function() {
    var _ref;

    return (_ref = this.subjectBlock) != null ? _ref.call(this) : void 0;
  });

  Example.prototype.pending = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.examplePromise.resolve();
      return this.result.state = 'pending';
    }
  };

  Example.prototype.skip = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.examplePromise.reject(new Error('Skipped'));
      return this.result.state = 'skipped';
    }
  };

  Example.prototype.resolve = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      if (this.result.hasFailures()) {
        this.examplePromise.reject();
        return this.result.state = 'failure';
      } else {
        this.examplePromise.resolve();
        return this.result.state = 'success';
      }
    }
  };

  Example.prototype.reject = function(reason) {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.examplePromise.reject(reason);
      return this.result.state = 'failure';
    }
  };

  Example.prototype.run = function() {
    var afterPromise,
      _this = this;

    this.examplePromise = new spectacular.Promise;
    afterPromise = new spectacular.Promise;
    this.result = new spectacular.ExampleResult(this);
    this.runBefore(function(err) {
      if (err != null) {
        return _this.reject(err);
      }
      return _this.executeBlock();
    });
    this.examplePromise.then(function() {
      return _this.runAfter(function(err) {
        if (err != null) {
          return afterPromise.reject(err);
        }
        return afterPromise.resolve();
      });
    });
    this.examplePromise.fail(function(reason) {
      return _this.runAfter(function(err) {
        if (err != null) {
          return afterPromise.reject(err);
        }
        return afterPromise.reject(reason);
      });
    });
    return afterPromise;
  };

  Example.prototype.runBefore = function(callback) {
    var befores, next,
      _this = this;

    befores = this.beforeHooks;
    next = function(err) {
      if (err != null) {
        return callback(err);
      }
      if (befores.length === 0) {
        return callback();
      } else {
        return _this.executeHook(befores.shift(), next);
      }
    };
    return next();
  };

  Example.prototype.runAfter = function(callback) {
    var afters, next,
      _this = this;

    afters = this.afterHooks;
    next = function(err) {
      if (err != null) {
        return callback(err);
      }
      if (afters.length === 0) {
        return callback();
      } else {
        return _this.executeHook(afters.shift(), next);
      }
    };
    return next();
  };

  Example.prototype.executeHook = function(hook, next) {
    var async, e,
      _this = this;

    try {
      if (this.acceptAsync(hook)) {
        async = new spectacular.AsyncExamplePromise;
        async.then(function() {
          return next();
        });
        async.fail(function(reason) {
          return next(reason);
        });
        async.run();
        return hook.call(this, async);
      } else {
        hook.call(this);
        return next();
      }
    } catch (_error) {
      e = _error;
      return next(e);
    }
  };

  Example.prototype.executeBlock = function() {
    var async, e,
      _this = this;

    try {
      if (this.acceptAsync(this.block)) {
        async = new spectacular.AsyncExamplePromise;
        async.then(function() {
          return _this.resolve();
        });
        async.fail(function(reason) {
          return _this.reject(reason);
        });
        async.run();
        return this.block.call(this, async);
      } else {
        this.block.call(this);
        return this.resolve();
      }
    } catch (_error) {
      e = _error;
      return this.reject(e);
    }
  };

  Example.prototype.toString = function() {
    return "[Example(" + this.description + ")]";
  };

  Example.prototype.acceptAsync = function(func) {
    return func.signature().length === 1;
  };

  return Example;

})();

spectacular.ExampleGroup = (function(_super) {
  __extends(ExampleGroup, _super);

  ExampleGroup.include(spectacular.HasCollection('children', 'child'), spectacular.HasNestedCollection('descendants', {
    through: 'children'
  }));

  ExampleGroup.childrenScope('exampleGroups', function(e) {
    return e.children != null;
  });

  ExampleGroup.childrenScope('examples', function(e) {
    return e.children == null;
  });

  ExampleGroup.descendantsScope('allExamples', function(e) {
    return e.children == null;
  });

  function ExampleGroup(block, desc, parent) {
    var owner, subject, type,
      _this = this;

    this.parent = parent;
    subject = null;
    switch (typeof desc) {
      case 'string':
        if (desc.indexOf('.') === 0) {
          this.noSpaceBeforeDescription = true;
          owner = this.subject;
          subject = owner != null ? owner[desc.replace('.', '')] : void 0;
          if (typeof subject === 'function') {
            subject = subject.bind(owner);
          }
          this.ownSubjectBlock = function() {
            return subject;
          };
        } else if (desc.indexOf('::') === 0) {
          this.noSpaceBeforeDescription = true;
          type = typeof this.subjectBlock === "function" ? this.subjectBlock() : void 0;
          this.ownSubjectBlock = function() {
            if (type) {
              owner = build(type, _this.parameters || []);
              return owner[desc.replace('::', '')].bind(owner);
            }
          };
        }
        break;
      default:
        this.noSpaceBeforeDescription = true;
        subject = desc;
        this.ownSubjectBlock = function() {
          return subject;
        };
        desc = (subject != null ? subject.name : void 0) || (subject != null ? subject.toString() : void 0) || '';
    }
    ExampleGroup.__super__.constructor.call(this, block, desc, this.parent);
    this.children = [];
  }

  ExampleGroup.prototype.run = function() {};

  ExampleGroup.prototype.executeBlock = function() {
    return this.block.call(this);
  };

  ExampleGroup.prototype.toString = function() {
    return "[ExampleGroup(" + this.description + ")]";
  };

  return ExampleGroup;

})(spectacular.Example);

rootExampleGroup = new spectacular.ExampleGroup;

currentExampleGroup = rootExampleGroup;

currentExample = null;

notInsideIt = function(method) {
  if (currentExample != null) {
    throw new Error("" + method + " called inside a it block");
  }
};

notOutsideIt = function(method) {
  if (currentExample == null) {
    throw new Error("" + method + " called outside a it block");
  }
};

spectacular.fail = function() {
  throw new Error('Failed');
};

spectacular.pending = function() {
  return currentExample.pending();
};

spectacular.skip = function() {
  return currentExample.skip();
};

spectacular.success = function() {};

spectacular.it = function(msgOrBlock, block) {
  var _ref;

  notInsideIt('it');
  if (typeof msgOrBlock === 'function') {
    _ref = ['', msgOrBlock], msgOrBlock = _ref[0], block = _ref[1];
  }
  return currentExampleGroup.addChild(new spectacular.Example(block, msgOrBlock, currentExampleGroup));
};

spectacular.xit = function(msgOrBlock, block) {
  notInsideIt('xit');
  if (typeof msgOrBlock === 'string') {
    return it(msgOrBlock, function() {
      return pending();
    });
  } else {
    return it(function() {
      return pending();
    });
  }
};

spectacular.before = function(block) {
  notInsideIt('before');
  return currentExampleGroup.ownBeforeHooks.push(block);
};

spectacular.after = function(block) {
  notInsideIt('after');
  return currentExampleGroup.ownAfterHooks.push(block);
};

spectacular.its = function(property, block) {
  var parentSubjectBlock;

  notInsideIt('its');
  parentSubjectBlock = currentExampleGroup.subjectBlock;
  return spectacular.context("" + property + " property", function() {
    spectacular.subject(property, function() {
      return typeof parentSubjectBlock === "function" ? parentSubjectBlock()[property] : void 0;
    });
    return spectacular.it(block);
  });
};

spectacular.itsInstance = function(block) {
  return notInsideIt('itsInstance');
};

spectacular.itsReturn = function(block) {
  var parentSubjectBlock;

  notInsideIt('itsReturn');
  parentSubjectBlock = currentExampleGroup.subjectBlock;
  return spectacular.context('returned value', function() {
    spectacular.subject('returnedValue', function() {
      return typeof parentSubjectBlock === "function" ? parentSubjectBlock().apply(this, this.parameters || []) : void 0;
    });
    return spectacular.it(block);
  });
};

spectacular.subject = function(name, block) {
  var _ref;

  notInsideIt('subject');
  if (typeof name === 'function') {
    _ref = [block, name], name = _ref[0], block = _ref[1];
  }
  currentExampleGroup.ownSubjectBlock = block;
  if (name != null) {
    return spectacular.given(name, block);
  }
};

spectacular.given = function(name, block) {
  notInsideIt('given');
  return spectacular.before(function() {
    return Object.defineProperty(this, name, {
      configurable: true,
      enumerable: true,
      get: block
    });
  });
};

spectacular.describe = function(subject, block) {
  var oldGroup;

  notInsideIt('describe');
  oldGroup = currentExampleGroup;
  currentExampleGroup = new spectacular.ExampleGroup(block, subject, oldGroup);
  oldGroup.addChild(currentExampleGroup);
  currentExampleGroup.executeBlock();
  return currentExampleGroup = oldGroup;
};

spectacular.xdescribe = function(subject, block) {
  return notInsideIt('xdescribe');
};

spectacular.context = spectacular.describe;

spectacular.xcontext = spectacular.xdescribe;

spectacular.withParameters = function() {
  var args;

  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  notInsideIt('withParameters');
  return spectacular.given('parameters', function() {
    return args;
  });
};

Object.defineProperty(Object.prototype, 'should', {
  writable: true,
  enumerable: false,
  value: function(matcher) {
    notOutsideIt('should');
    return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, this, matcher, false));
  }
});

Object.defineProperty(Object.prototype, 'shouldnt', {
  writable: true,
  enumerable: false,
  value: function(matcher) {
    notOutsideIt('should');
    return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, this, matcher, true));
  }
});

spectacular.should = function(matcher, neg) {
  if (neg == null) {
    neg = false;
  }
  notOutsideIt('should');
  return currentExample.result.expectations.push(new spectacular.Expectation(currentExample, currentExample.subject, matcher, neg));
};

spectacular.shouldnt = function(matcher) {
  return should(matcher, true);
};

'it xit describe xdescribe context xcontext\
  before after given subject its itsInstance\
  itsReturn withParameters fail pending success\
  skip should shouldnt\
'.split(/\s+/g).forEach(function(k) {
  return global[k] = spectacular[k];
});
