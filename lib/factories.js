// Generated by CoffeeScript 1.6.2
var spectacular,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

spectacular = {};

spectacular.factories || (spectacular.factories = {});

spectacular.factories.buildMethodsCache = {};

spectacular.factories.build = function(ctor, args) {
  var argumentsSignature, comma, f, n;

  if (args == null) {
    args = [];
  }
  f = spectacular.factories.buildMethodsCache[args.length] != null ? spectacular.factories.buildMethodsCache[args.length] : (argumentsSignature = '', comma = '', args.length > 0 ? (argumentsSignature = ((function() {
    var _i, _ref, _results;

    _results = [];
    for (n = _i = 0, _ref = args.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      _results.push("arg" + n);
    }
    return _results;
  })()).join(','), comma = ',') : void 0, spectacular.factories.buildMethodsCache[args.length] = new Function("ctor" + comma + argumentsSignature, "return new ctor(" + argumentsSignature + ");"));
  return f.apply(null, [ctor].concat(args));
};

spectacular.factories.Set = (function() {
  function Set(property, value) {
    this.property = property;
    this.value = value;
  }

  Set.prototype.apply = function(instance) {
    if (typeof this.value === 'function') {
      return instance[this.property] = this.value();
    } else {
      return instance[this.property] = this.value;
    }
  };

  return Set;

})();

spectacular.factories.Trait = (function() {
  Trait.EXPOSED_PROPERTIES = 'set'.split(/\s+/g);

  function Trait(name) {
    this.name = name;
    this.set = __bind(this.set, this);
    this.previous = {};
    this.setters = [];
  }

  Trait.prototype.set = function(property, value) {
    return this.setters.push(new spectacular.factories.Set(property, value));
  };

  Trait.prototype.applySet = function(instance) {
    return this.setters.forEach(function(setter) {
      return setter.apply(instance);
    });
  };

  Trait.prototype.load = function() {
    var _this = this;

    return this.constructor.EXPOSED_PROPERTIES.forEach(function(k) {
      if (global[k] != null) {
        _this.previous[k] = global[k];
      }
      return global[k] = _this[k];
    });
  };

  Trait.prototype.unload = function() {
    var _this = this;

    return this.constructor.EXPOSED_PROPERTIES.forEach(function(k) {
      if (_this.previous[k] != null) {
        return global[k] = _this.previous[k];
      } else {
        return delete global[k];
      }
    });
  };

  return Trait;

})();

spectacular.factories.Factory = (function(_super) {
  __extends(Factory, _super);

  Factory.EXPOSED_PROPERTIES = 'set trait'.split(/\s+/g);

  function Factory(name, _class) {
    this["class"] = _class;
    this.trait = __bind(this.trait, this);
    Factory.__super__.constructor.call(this, name);
    this.traits = {};
  }

  Factory.prototype.trait = function(name, block) {
    var trait, _base;

    trait = (_base = this.traits)[name] || (_base[name] = new spectacular.factories.Trait(name));
    trait.load();
    block.call(trait);
    return trait.unload();
  };

  Factory.prototype.build = function(traits, options) {
    var instance, k, trait, v, _i, _len;

    if (options == null) {
      options = {};
    }
    instance = build(this["class"]);
    this.applySet(instance);
    for (_i = 0, _len = traits.length; _i < _len; _i++) {
      trait = traits[_i];
      this.traits[trait].applySet(instance);
    }
    for (k in options) {
      v = options[k];
      instance[k] = v;
    }
    return instance;
  };

  return Factory;

})(spectacular.factories.Trait);

spectacular.factoriesCache = {};

spectacular.factories.factory = function(name, options, block) {
  var cache, fct;

  cache = spectacular.factoriesCache;
  fct = cache[name] || (cache[name] = new spectacular.factories.Factory(name, options["class"]));
  fct.load();
  block.call(fct);
  return fct.unload();
};

spectacular.factories.create = function() {
  var fct, name, options, traits, _i;

  name = arguments[0], traits = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), options = arguments[_i++];
  if (name == null) {
    throw new Error('no factory name provided');
  }
  if (typeof options === 'string') {
    traits.push(options);
    options = null;
  }
  fct = spectacular.factoriesCache[name];
  if (fct == null) {
    throw new Error("missing factory " + name);
  }
  return fct.build(traits, options);
};

global.build = spectacular.factories.build;

global.create = spectacular.factories.create;

global.factory = spectacular.factories.factory;

build._name = 'build';

create._name = 'create';

factory._name = 'factory';
