// Generated by CoffeeScript 1.6.2
var utils,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

utils = spectacular.utils;

exports.StackFormatter = (function() {
  function StackFormatter(error, options) {
    this.error = error;
    this.options = options;
  }

  StackFormatter.prototype.format = function() {
    var promise, res, stack,
      _this = this;

    promise = new spectacular.Promise;
    stack = this.error.stack.split('\n').filter(function(line) {
      return /^\s{4}at.*$/g.test(line);
    });
    res = '\n';
    if (this.options.showSource) {
      this.formatErrorInFile(stack[0]).then(function(msg) {
        res += msg + _this.formatStack(stack);
        if (!_this.options.noColors) {
          res = res.grey;
        }
        return promise.resolve(res);
      });
    } else {
      res += this.formatStack(stack);
      if (!this.options.noColors) {
        res = res.grey;
      }
      promise.resolve(res);
    }
    return promise;
  };

  StackFormatter.prototype.formatStack = function(stack) {
    if (this.options.longTrace) {
      return "\n\n" + (stack.join('\n')) + "\n";
    } else {
      return "\n" + (stack.slice(0, 6).concat("    ...\n\n    use --long-trace option to view the " + (stack.length - 6) + " remaining lines").join('\n')) + "\n\n";
    }
  };

  StackFormatter.prototype.formatErrorInFile = function(line) {
    var column, file, match, promise, re, _ref;

    promise = new spectacular.Promise;
    re = /\((.*):(.*):(.*)\)/;
    if (!re.test(line)) {
      return '';
    }
    _ref = re.exec(line), match = _ref[0], file = _ref[1], line = _ref[2], column = _ref[3];
    this.getLines(file, parseInt(line), parseInt(column)).then(function(lines) {
      return promise.resolve("\n" + lines + "\n");
    });
    return promise;
  };

  StackFormatter.prototype.getLines = function(file, line, column) {
    var promise,
      _this = this;

    promise = new spectacular.Promise;
    this.options.loadFile(file).then(function(fileContent) {
      var compile, endLine, lines, startLine;

      if (_this.options.coffee && file.indexOf('.coffee') !== -1) {
        compile = require('coffee-script').compile;
        fileContent = compile(fileContent, {
          bare: true
        });
      }
      fileContent = fileContent.split('\n').map(function(l, i) {
        return "    " + (utils.padRight(i + 1)) + " | " + l;
      });
      _this.insertColumnLine(fileContent, line, column);
      startLine = Math.max(1, line - 3) - 1;
      endLine = Math.min(fileContent.length, line + 2) - 1;
      lines = fileContent.slice(startLine, +endLine + 1 || 9e9).join('\n');
      return promise.resolve(lines);
    });
    return promise;
  };

  StackFormatter.prototype.insertColumnLine = function(content, line, column) {
    if (line === content.length) {
      return content.push(line);
    } else {
      return content.splice(line, 0, "         |" + (utils.padRight('^', column - 2)));
    }
  };

  return StackFormatter;

})();

exports.ConsoleReporter = (function() {
  ConsoleReporter.include(spectacular.EventDispatcher);

  function ConsoleReporter(options) {
    this.options = options;
    this.printExampleResult = __bind(this.printExampleResult, this);
    this.formatResult = __bind(this.formatResult, this);
    this.onEnd = __bind(this.onEnd, this);
    this.onResult = __bind(this.onResult, this);
    this.errorsCounter = 1;
    this.failuresCounter = 1;
    this.errors = [];
    this.failures = [];
    this.skipped = [];
    this.pending = [];
    this.results = [];
    this.examples = [];
  }

  ConsoleReporter.prototype.onResult = function(event) {
    var example;

    example = event.target;
    this.printExampleResult(example);
    this.results.push(example.result);
    this.examples.push(example);
    switch (example.result.state) {
      case 'pending':
        return this.pending.push(example);
      case 'skipped':
        return this.skipped.push(example);
      case 'errored':
        return this.errors.push(example);
      case 'failure':
        return this.failures.push(example);
    }
  };

  ConsoleReporter.prototype.hasFailures = function() {
    return this.results.some(function(result) {
      var _ref;

      return (_ref = result.state) === 'failure' || _ref === 'skipped' || _ref === 'errored';
    });
  };

  ConsoleReporter.prototype.onEnd = function(event) {
    var runner,
      _this = this;

    runner = event.target;
    return this.buildResults(runner.loadStartedAt, runner.loadEndedAt, runner.specsStartedAt, runner.specsEndedAt).then(function(report) {
      return _this.dispatch(new spectacular.Event('report', report));
    });
  };

  ConsoleReporter.prototype.buildResults = function(lstart, lend, sstart, send) {
    var promise, res, result,
      _this = this;

    promise = new spectacular.Promise;
    res = '\n\n';
    spectacular.Promise.all((function() {
      var _i, _len, _ref, _results;

      _ref = this.results;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        _results.push(this.formatResult(result));
      }
      return _results;
    }).call(this)).then(function(results) {
      res += results.filter(function(s) {
        return (s != null) && s.length > 0;
      }).join('\n');
      res += _this.formatResume();
      if (_this.options.profile) {
        res += _this.formatProfile(sstart, send);
      }
      res += _this.formatTimers(lstart, lend, sstart, send);
      res += _this.formatCounters();
      res += '\n\n';
      return promise.resolve(res);
    });
    return promise;
  };

  ConsoleReporter.prototype.formatResult = function(result) {
    var expectation, promise, _i, _len, _ref;

    promise = new spectacular.Promise;
    switch (result.state) {
      case 'errored':
        this.formatExampleError(result.example).then(function(msg) {
          return promise.resolve(msg);
        });
        break;
      case 'failure':
        if (result.expectations.length > 0) {
          _ref = result.expectations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            expectation = _ref[_i];
            if (!expectation.success) {
              this.formatExpectationFailure(expectation).then(function(msg) {
                return promise.resolve(msg);
              });
            }
          }
        } else {
          this.formatExampleFailure(result.example).then(function(msg) {
            return promise.resolve(msg);
          });
        }
        break;
      default:
        promise.resolve('');
    }
    return promise;
  };

  ConsoleReporter.prototype.printExampleResult = function(example) {
    var res;

    res = this.formatExampleResult(example);
    if (res != null) {
      return this.dispatch(new spectacular.Event('message', res));
    }
  };

  ConsoleReporter.prototype.formatExampleResult = function(example) {
    if (this.options.noColors) {
      switch (example.result.state) {
        case 'pending':
          return '*';
        case 'skipped':
          return 'x';
        case 'failure':
          return 'F';
        case 'errored':
          return 'E';
        case 'success':
          return '.';
      }
    } else {
      switch (example.result.state) {
        case 'pending':
          return '*'.yellow;
        case 'skipped':
          return 'x'.magenta;
        case 'failure':
          return 'F'.red;
        case 'errored':
          return 'E'.yellow;
        case 'success':
          return '.'.green;
      }
    }
  };

  ConsoleReporter.prototype.formatStack = function(e) {
    return new exports.StackFormatter(e, this.options).format();
  };

  ConsoleReporter.prototype.formatExampleFailure = function(example) {
    var promise, res;

    promise = new spectacular.Promise;
    res = this.failureBadge(example.description);
    this.formatError(example.reason).then(function(msg) {
      res += msg + '\n';
      return promise.resolve(res);
    });
    return promise;
  };

  ConsoleReporter.prototype.formatExpectationFailure = function(expectation) {
    var promise, res;

    promise = new spectacular.Promise;
    res = this.failureBadge(expectation.description);
    res += '\n';
    res += this.formatMessage(expectation.message);
    if (this.options.trace) {
      this.formatStack(expectation.trace).then(function(msg) {
        res += msg + '\n';
        return promise.resolve(res);
      });
    } else {
      promise.resolve(res);
    }
    return promise;
  };

  ConsoleReporter.prototype.formatExampleError = function(example) {
    var promise, res;

    promise = new spectacular.Promise;
    res = this.errorBadge(example.description);
    this.formatError(example.reason).then(function(msg) {
      return promise.resolve(res + msg);
    });
    return promise;
  };

  ConsoleReporter.prototype.formatError = function(error) {
    var promise, res;

    promise = new spectacular.Promise;
    res = this.formatMessage(error.message);
    if (this.options.trace) {
      this.formatStack(error).then(function(msg) {
        return promise.resolve(res + msg);
      });
    } else {
      promise.resolve(res);
    }
    return promise;
  };

  ConsoleReporter.prototype.failureBadge = function(message) {
    var badge;

    badge = ' FAIL ';
    if (this.options.noColors) {
      return "" + badge + " - " + (this.failuresCounter++) + " - " + message + "\n";
    } else {
      return ("" + badge.inverse.bold + " " + (this.failuresCounter++) + " " + ' '.inverse + " " + message + "\n").red;
    }
  };

  ConsoleReporter.prototype.errorBadge = function(message) {
    var badge;

    badge = ' ERROR ';
    if (this.options.noColors) {
      return "" + badge + " - " + (this.errorsCounter++) + " - " + message + "\n";
    } else {
      return ("" + badge.inverse.bold + " " + (this.errorsCounter++) + " " + ' '.inverse + " " + message + "\n").yellow;
    }
  };

  ConsoleReporter.prototype.formatMessage = function(message) {
    return "\n" + (utils.indent(message || ''));
  };

  ConsoleReporter.prototype.formatResume = function() {
    var res;

    res = '';
    if (this.errors.length > 0) {
      res += this.mapDescription('Errors:', this.errors, 'yellow');
    }
    if (this.failures.length > 0) {
      res += this.mapDescription('Failures:', this.failures, 'red');
    }
    if (this.skipped.length > 0) {
      res += this.mapDescription('Skipped:', this.skipped, 'magenta');
    }
    if (this.pending.length > 0) {
      res += this.mapDescription('Pending:', this.pending, 'yellow');
    }
    return res;
  };

  ConsoleReporter.prototype.formatProfile = function(specsStartedAt, specsEndedAt) {
    var duration, example, rate, res, sortedExamples, topSlowest, totalDuration, _i, _len;

    sortedExamples = this.examples.sort(function(a, b) {
      return b.duration - a.duration;
    }).slice(0, 10);
    totalDuration = specsEndedAt.getTime() - specsStartedAt.getTime();
    topSlowest = sortedExamples.reduce((function(a, b) {
      return a + b.duration;
    }), 0);
    rate = Math.floor(topSlowest / totalDuration * 10000) / 100;
    res = "Top 10 slowest examples (" + (topSlowest / 1000) + " seconds, " + rate + "% of total time)\n\n";
    for (_i = 0, _len = sortedExamples.length; _i < _len; _i++) {
      example = sortedExamples[_i];
      duration = "" + (Math.floor(example.duration) / 1000) + " seconds";
      res += "    " + (this.options.noColors ? duration : duration.red) + " " + example.description + "\n";
    }
    return "" + res + "\n";
  };

  ConsoleReporter.prototype.mapDescription = function(desc, array, color) {
    var res;

    res = "    " + desc + "\n\n";
    res += array.map(function(e, i) {
      return "      " + (i + 1) + ". " + e.description;
    }).join('\n');
    if (!this.options.noColors) {
      res = res[color];
    }
    return "" + res + "\n\n";
  };

  ConsoleReporter.prototype.formatTimers = function(loadStartedAt, loadEndedAt, specsStartedAt, specsEndedAt) {
    var loadDuration, res, specsDuration;

    if ((loadStartedAt != null) && (loadEndedAt != null)) {
      loadDuration = this.formatDuration(loadStartedAt, loadEndedAt);
    }
    specsDuration = this.formatDuration(specsStartedAt, specsEndedAt);
    res = '';
    if (loadDuration != null) {
      res += "Specs loaded in " + loadDuration + "\n";
    }
    return res += "Finished in " + specsDuration + "\n\n";
  };

  ConsoleReporter.prototype.formatCounters = function() {
    var assertions, errored, failures, pending, skipped, success;

    failures = this.failures.length;
    errored = this.errors.length;
    skipped = this.skipped.length;
    pending = this.pending.length;
    success = this.examples.length - failures - errored - pending - skipped;
    assertions = this.results.reduce((function(a, b) {
      return a + b.expectations.length;
    }), 0);
    return this.formatResults(success, failures, errored, skipped, pending, assertions);
  };

  ConsoleReporter.prototype.formatResults = function(s, f, e, sk, p, a) {
    var he, toggle;

    toggle = utils.toggle;
    he = f + e;
    return utils.squeeze("" + (this.formatCount(s, 'success', 'success', toggle(he, 'green'))) + ",    " + (this.formatCount(a, 'assertion', 'assertions', toggle(he, 'green'))) + ",    " + (this.formatCount(f, 'failure', 'failures', toggle(he, 'green', 'red'))) + ",    " + (this.formatCount(e, 'error', 'errors', toggle(e, 'green', 'yellow'))) + ",    " + (this.formatCount(sk, 'skipped', 'skipped', toggle(sk, 'green', 'magenta'))) + ",    " + (this.formatCount(p, 'pending', 'pending', toggle(p, 'green', 'yellow'))));
  };

  ConsoleReporter.prototype.formatDuration = function(start, end) {
    var duration;

    duration = (end.getTime() - start.getTime()) / 1000;
    duration = "" + (Math.max(0, duration)) + "s";
    if (!this.options.noColors) {
      duration = duration.yellow;
    }
    return duration;
  };

  ConsoleReporter.prototype.formatCount = function(value, singular, plural, color) {
    var s;

    s = "" + value + " " + (value === 0 ? plural : value === 1 ? singular : plural);
    if ((color != null) && !this.options.noColors) {
      s = s[color];
    }
    return s;
  };

  return ConsoleReporter;

})();
