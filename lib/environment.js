// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

spectacular.Environment = (function() {
  Environment.prototype.exposedMethods = 'it xit describe xdescribe context xcontext\
    before after given subject its itsInstance\
    itsReturn withParameters fail pending success\
    skip should shouldnt dependsOn spyOn the\
    withArguments';

  function Environment(Runner, Formatter, options) {
    this.Runner = Runner;
    this.Formatter = Formatter;
    this.options = options;
    this.shouldnt = __bind(this.shouldnt, this);
    this.should = __bind(this.should, this);
    this.spyOn = __bind(this.spyOn, this);
    this.dependsOn = __bind(this.dependsOn, this);
    this.withArguments = __bind(this.withArguments, this);
    this.withParameters = __bind(this.withParameters, this);
    this.xcontext = __bind(this.xcontext, this);
    this.context = __bind(this.context, this);
    this.xdescribe = __bind(this.xdescribe, this);
    this.describe = __bind(this.describe, this);
    this.given = __bind(this.given, this);
    this.subject = __bind(this.subject, this);
    this.itsReturn = __bind(this.itsReturn, this);
    this.itsInstance = __bind(this.itsInstance, this);
    this.its = __bind(this.its, this);
    this.after = __bind(this.after, this);
    this.before = __bind(this.before, this);
    this.xit = __bind(this.xit, this);
    this.the = __bind(this.the, this);
    this.it = __bind(this.it, this);
    this.success = __bind(this.success, this);
    this.skip = __bind(this.skip, this);
    this.pending = __bind(this.pending, this);
    this.fail = __bind(this.fail, this);
    this.notOutsideIt = __bind(this.notOutsideIt, this);
    this.notInsideIt = __bind(this.notInsideIt, this);
    this.load = __bind(this.load, this);
    this.run = __bind(this.run, this);
    this.rootExampleGroup = new spectacular.ExampleGroup;
    this.currentExampleGroup = this.rootExampleGroup;
    this.currentExample = null;
    this.formatter = new this.Formatter(this.rootExampleGroup, this.options, this);
    this.runner = new this.Runner(this.rootExampleGroup, this.options, this, this.formatter);
  }

  Environment.prototype.run = function() {
    this.load();
    return this.runner.run();
  };

  Environment.prototype.load = function() {
    var env,
      _this = this;

    env = this;
    Object.defineProperty(Object.prototype, 'should', {
      writable: true,
      enumerable: false,
      value: function(matcher, neg) {
        if (neg == null) {
          neg = false;
        }
        env.notOutsideIt('should');
        if (matcher == null) {
          return;
        }
        return env.currentExample.result.addExpectation(new spectacular.Expectation(env.currentExample, this.valueOf(), matcher, neg));
      }
    });
    Object.defineProperty(Object.prototype, 'shouldnt', {
      writable: true,
      enumerable: false,
      value: function(matcher) {
        env.notOutsideIt('should');
        return this.should(matcher, true);
      }
    });
    return this.exposedMethods.split(/\s+/g).forEach(function(k) {
      var fn;

      fn = function() {
        return env[k].apply(env, arguments);
      };
      fn._name = k;
      return global[k] = fn;
    });
  };

  Environment.prototype.clone = function() {
    var k, optionsCopy, v, _ref;

    optionsCopy = {};
    _ref = this.options;
    for (k in _ref) {
      v = _ref[k];
      optionsCopy[k] = v;
    }
    return new spectacular.Environment(this.Runner, this.Formatter, optionsCopy);
  };

  Environment.prototype.notInsideIt = function(method) {
    if (this.currentExample != null) {
      throw new Error("" + method + " called inside a it block");
    }
  };

  Environment.prototype.notOutsideIt = function(method) {
    if (this.currentExample == null) {
      throw new Error("" + method + " called outside a it block");
    }
  };

  Environment.prototype.fail = function() {
    return this.currentExample.reject(new Error('Failed'));
  };

  Environment.prototype.pending = function() {
    return this.currentExample.pending();
  };

  Environment.prototype.skip = function() {
    return this.currentExample.skip();
  };

  Environment.prototype.success = function() {};

  Environment.prototype.it = function(msgOrBlock, block) {
    var _ref;

    this.notInsideIt('it');
    if (typeof msgOrBlock === 'function') {
      _ref = ['', msgOrBlock], msgOrBlock = _ref[0], block = _ref[1];
    }
    return this.currentExampleGroup.addChild(new spectacular.Example(block, msgOrBlock, this.currentExampleGroup));
  };

  Environment.prototype.the = function(msgOrBlock, block) {
    return this.it(msgOrBlock, block);
  };

  Environment.prototype.xit = function(msgOrBlock, block) {
    this.notInsideIt('xit');
    if (typeof msgOrBlock === 'string') {
      return this.it(msgOrBlock, function() {
        return pending();
      });
    } else {
      return this.it(function() {
        return pending();
      });
    }
  };

  Environment.prototype.before = function(block) {
    this.notInsideIt('before');
    return this.currentExampleGroup.ownBeforeHooks.push(block);
  };

  Environment.prototype.after = function(block) {
    this.notInsideIt('after');
    return this.currentExampleGroup.ownAfterHooks.push(block);
  };

  Environment.prototype.its = function(property, block) {
    var parentSubjectBlock,
      _this = this;

    this.notInsideIt('its');
    parentSubjectBlock = this.currentExampleGroup.subjectBlock;
    return this.context("" + property + " property", function() {
      _this.subject(property, function() {
        return typeof parentSubjectBlock === "function" ? parentSubjectBlock()[property] : void 0;
      });
      return _this.it(block);
    });
  };

  Environment.prototype.itsInstance = function(block) {
    var parentSubjectBlock,
      _this = this;

    this.notInsideIt('itsInstance');
    parentSubjectBlock = this.currentExampleGroup.subjectBlock;
    return this.context('instance', function() {
      _this.subject('instance', function() {
        return build(typeof parentSubjectBlock === "function" ? parentSubjectBlock() : void 0, this.parameters || []);
      });
      return _this.it(block);
    });
  };

  Environment.prototype.itsReturn = function(block) {
    var parentSubjectBlock,
      _this = this;

    this.notInsideIt('itsReturn');
    parentSubjectBlock = this.currentExampleGroup.subjectBlock;
    return this.context('returned value', function() {
      _this.subject('returnedValue', function() {
        return typeof parentSubjectBlock === "function" ? parentSubjectBlock().apply(this, this.parameters || []) : void 0;
      });
      return _this.it(block);
    });
  };

  Environment.prototype.subject = function(name, block) {
    var _ref;

    this.notInsideIt('subject');
    if (typeof name === 'function') {
      _ref = [block, name], name = _ref[0], block = _ref[1];
    }
    this.currentExampleGroup.ownSubjectBlock = block;
    if (name != null) {
      return this.given(name, block);
    }
  };

  Environment.prototype.given = function(name, block) {
    this.notInsideIt('given');
    return this.before(function() {
      var _this = this;

      return Object.defineProperty(this, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var _name;

          return _this[_name = "__" + name] || (_this[_name] = block.call(_this));
        }
      });
    });
  };

  Environment.prototype.describe = function(subject, options, block) {
    var error, oldGroup, _ref;

    if (typeof options === 'function') {
      _ref = [block, options], options = _ref[0], block = _ref[1];
    }
    this.notInsideIt('describe');
    oldGroup = this.currentExampleGroup;
    this.currentExampleGroup = new spectacular.ExampleGroup(block, subject, oldGroup, options);
    oldGroup.addChild(this.currentExampleGroup);
    try {
      return this.currentExampleGroup.executeBlock();
    } catch (_error) {
      error = _error;
    } finally {
      this.currentExampleGroup = oldGroup;
      if (error != null) {
        throw error;
      }
    }
  };

  Environment.prototype.xdescribe = function(subject, block) {
    this.notInsideIt('xdescribe');
    return describe(subject, function() {
      return it(function() {
        return pending();
      });
    });
  };

  Environment.prototype.context = function(subject, options, block) {
    return this.describe(subject, options, block);
  };

  Environment.prototype.xcontext = function() {
    return this.xdescribe();
  };

  Environment.prototype.withParameters = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.notInsideIt('withParameters');
    return this.given('parameters', function() {
      return args;
    });
  };

  Environment.prototype.withArguments = function() {
    return this.withParameters.apply(this, arguments);
  };

  Environment.prototype.dependsOn = function(spec) {
    return this.currentExampleGroup.ownDependencies.push(spec);
  };

  Environment.prototype.spyOn = function(obj, method) {
    var context, oldMethod, spy;

    oldMethod = obj[method];
    context = this.currentExample.context;
    spy = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      spy.argsForCall.push(args);
      if (spy.mock != null) {
        return spy.mock.apply(obj, args);
      } else {
        return oldMethod.apply(obj, args);
      }
    };
    spy.spied = oldMethod;
    spy.argsForCall = [];
    spy.andCallFake = function(mock) {
      this.mock = mock;
      return this;
    };
    spy.andReturns = function(value) {
      return spy.andCallFake(function() {
        return value;
      });
    };
    spy.andCallThrough = function(block) {
      this.mock = function() {
        return block.call(context, oldMethod.apply(this, arguments));
      };
      return this;
    };
    this.currentExample.ownAfterHooks.push(function() {
      return obj[method] = oldMethod;
    });
    obj[method] = spy;
    return spy;
  };

  Environment.prototype.should = function(matcher, neg) {
    if (neg == null) {
      neg = false;
    }
    this.notOutsideIt('should');
    if (matcher == null) {
      return;
    }
    return this.currentExample.result.addExpectation(new spectacular.Expectation(this.currentExample, this.currentExample.subject, matcher, neg));
  };

  Environment.prototype.shouldnt = function(matcher) {
    return this.should(matcher, true);
  };

  Environment.prototype.toString = function() {
    return '[spectacular Environment]';
  };

  return Environment;

})();
