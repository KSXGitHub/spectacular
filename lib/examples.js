// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

spectacular.Expectation = (function() {
  function Expectation(example, actual, matcher, not) {
    this.example = example;
    this.actual = actual;
    this.matcher = matcher;
    this.not = not != null ? not : false;
    this.createMessage = __bind(this.createMessage, this);
    this.assert = __bind(this.assert, this);
  }

  Expectation.prototype.assert = function() {
    var promise, timeout,
      _this = this;

    promise = new spectacular.Promise;
    timeout = null;
    spectacular.Promise.unit().then(function() {
      timeout = setTimeout(function() {
        _this.success = false;
        _this.trace = new Error('matcher timed out');
        _this.message = _this.matcher.message;
        _this.description = _this.matcher.description;
        return promise.resolve(_this.success);
      }, _this.matcher.timeout || 5000);
      return _this.matcher.assert(_this.actual, _this.not ? ' not' : '');
    }).then(function(success) {
      _this.success = success;
      clearTimeout(timeout);
      if (_this.not) {
        _this.success = !_this.success;
      }
      _this.createMessage();
      return promise.resolve(_this.success);
    }).fail(function(trace) {
      _this.trace = trace;
      clearTimeout(timeout);
      _this.success = false;
      if (_this.matcher.message == null) {
        _this.matcher.message = _this.trace.message;
      }
      if (_this.matcher.description == null) {
        _this.matcher.description = '';
      }
      return promise.reject(_this.trace);
    });
    return promise;
  };

  Expectation.prototype.createMessage = function() {
    var e, specIndex, stack;

    this.message = this.matcher.message;
    if (!this.success && (this.trace == null)) {
      try {
        throw new Error;
      } catch (_error) {
        e = _error;
        stack = e.stack.split('\n');
        specIndex = spectacular.env.runner.findSpecFileInStack(stack);
        if (specIndex !== -1) {
          e.stack = stack.slice(specIndex).join('\n');
        }
        this.trace = e;
      }
    }
    return this.description = "" + this.example.description + " " + this.matcher.description;
  };

  return Expectation;

})();

spectacular.ExampleResult = (function() {
  var _addExpectation;

  ExampleResult.include(spectacular.HasCollection('expectations', 'expectation'));

  function ExampleResult(example, state) {
    this.example = example;
    this.state = state;
    this.expectations = [];
    this.promise = spectacular.Promise.unit();
  }

  ExampleResult.prototype.hasFailures = function() {
    return this.expectations.some(function(e) {
      return !e.success;
    });
  };

  _addExpectation = ExampleResult.prototype.addExpectation;

  ExampleResult.prototype.addExpectation = function(expectation) {
    var successHandler,
      _this = this;

    successHandler = function() {
      return expectation.assert().fail(function(e) {
        return _this.example.error(e);
      });
    };
    this.promise = this.promise.then(successHandler);
    return _addExpectation.call(this, expectation);
  };

  return ExampleResult;

})();

spectacular.Example = (function() {
  Example.include(spectacular.HasAncestors);

  Example.include(spectacular.Describable);

  Example.include(spectacular.FollowUpProperty('subjectBlock'));

  Example.include(spectacular.MergeUpProperty('beforeHooks'));

  Example.include(spectacular.MergeUpProperty('afterHooks'));

  Example.include(spectacular.MergeUpProperty('dependencies'));

  function Example(block, ownDescription, parent) {
    this.block = block;
    this.ownDescription = ownDescription != null ? ownDescription : '';
    this.parent = parent;
    this.executeExpectations = __bind(this.executeExpectations, this);
    this.reject = __bind(this.reject, this);
    this.resolve = __bind(this.resolve, this);
    if (this.ownDescription === '') {
      this.noSpaceBeforeDescription = true;
    }
    this.ownBeforeHooks = [];
    this.ownAfterHooks = [];
    this.ownDependencies = [];
  }

  Example.getter('subject', function() {
    var _ref;

    return this.__subject || (this.__subject = (_ref = this.subjectBlock) != null ? _ref.call(this.context) : void 0);
  });

  Example.getter('finished', function() {
    var _ref;

    return (_ref = this.examplePromise) != null ? _ref.isResolved() : void 0;
  });

  Example.getter('failed', function() {
    var _ref;

    return (_ref = this.examplePromise) != null ? _ref.isRejected() : void 0;
  });

  Example.getter('succeed', function() {
    var _ref;

    return (_ref = this.examplePromise) != null ? _ref.isFulfilled() : void 0;
  });

  Example.ancestorsScope('identifiedAncestors', function(e) {
    return e.options.id != null;
  });

  Example.prototype.pending = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.result.state = 'pending';
      return this.examplePromise.resolve();
    }
  };

  Example.prototype.skip = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.result.state = 'skipped';
      return this.examplePromise.reject(new Error('Skipped'));
    }
  };

  Example.prototype.resolve = function() {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      if (this.result.hasFailures()) {
        this.result.state = 'failure';
        return this.examplePromise.reject();
      } else if (this.result.expectationsCount() === 0) {
        this.result.state = 'pending';
        return this.examplePromise.resolve();
      } else {
        this.result.state = 'success';
        return this.examplePromise.resolve();
      }
    }
  };

  Example.prototype.reject = function(reason) {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.result.state = 'failure';
      return this.examplePromise.reject(reason);
    }
  };

  Example.prototype.error = function(reason) {
    var _ref;

    if ((_ref = this.examplePromise) != null ? _ref.pending : void 0) {
      this.result.state = 'errored';
      return this.examplePromise.reject(reason);
    }
  };

  Example.prototype.createContext = function() {
    var context,
      _this = this;

    context = {};
    Object.defineProperty(context, 'subject', {
      get: function() {
        return _this.subject;
      }
    });
    return context;
  };

  Example.prototype.dependenciesMet = function() {
    return true;
  };

  Example.prototype.run = function() {
    var afterPromise,
      _this = this;

    this.context = this.createContext();
    this.examplePromise = new spectacular.Promise;
    this.result = new spectacular.ExampleResult(this);
    if (!this.dependenciesMet()) {
      this.skip();
      this.examplePromise;
    }
    afterPromise = new spectacular.Promise;
    this.runBefore(function(err) {
      if (err != null) {
        return _this.reject(err);
      }
      return _this.executeBlock();
    });
    this.examplePromise.then(function() {
      return _this.runAfter(function(err) {
        if (err != null) {
          return afterPromise.reject(err);
        }
        return afterPromise.resolve();
      });
    });
    this.examplePromise.fail(function(reason) {
      return _this.runAfter(function(err) {
        if (err != null) {
          return afterPromise.reject(err);
        }
        return afterPromise.reject(reason);
      });
    });
    return afterPromise;
  };

  Example.prototype.runBefore = function(callback) {
    var befores, next,
      _this = this;

    befores = this.beforeHooks;
    next = function(err) {
      if (err != null) {
        return callback(err);
      }
      if (befores.length === 0) {
        return callback();
      } else {
        return _this.executeHook(befores.shift(), next);
      }
    };
    return next();
  };

  Example.prototype.runAfter = function(callback) {
    var afters, next,
      _this = this;

    afters = this.afterHooks;
    next = function(err) {
      if (err != null) {
        return callback(err);
      }
      if (afters.length === 0) {
        return callback();
      } else {
        return _this.executeHook(afters.shift(), next);
      }
    };
    return next();
  };

  Example.prototype.executeHook = function(hook, next) {
    var async, e,
      _this = this;

    try {
      if (this.acceptAsync(hook)) {
        async = new spectacular.AsyncPromise;
        async.then(function() {
          return next();
        });
        async.fail(function(reason) {
          return next(reason);
        });
        async.run();
        return hook.call(this.context, async);
      } else {
        hook.call(this.context);
        return next();
      }
    } catch (_error) {
      e = _error;
      return next(e);
    }
  };

  Example.prototype.executeBlock = function() {
    var async, e;

    try {
      if (this.acceptAsync(this.block)) {
        async = new spectacular.AsyncPromise;
        async.then(this.executeExpectations, this.reject);
        async.run();
        return this.block.call(this.context, async);
      } else {
        this.block.call(this.context);
        return this.executeExpectations();
      }
    } catch (_error) {
      e = _error;
      return this.error(e);
    }
  };

  Example.prototype.executeExpectations = function() {
    return this.result.promise.then(this.resolve, this.reject);
  };

  Example.prototype.toString = function() {
    return "[Example(" + this.description + ")]";
  };

  Example.prototype.acceptAsync = function(func) {
    return func.signature().length === 1;
  };

  return Example;

})();

spectacular.ExampleGroup = (function(_super) {
  __extends(ExampleGroup, _super);

  ExampleGroup.include(spectacular.HasCollection('children', 'child'));

  ExampleGroup.include(spectacular.HasNestedCollection('descendants', {
    through: 'children'
  }));

  ExampleGroup.childrenScope('exampleGroups', function(e) {
    return e.children != null;
  });

  ExampleGroup.childrenScope('examples', function(e) {
    return e.children == null;
  });

  ExampleGroup.descendantsScope('allExamples', function(e) {
    return e.children == null;
  });

  ExampleGroup.descendantsScope('identifiedExamples', function(e) {
    var _ref;

    return ((_ref = e.options) != null ? _ref.id : void 0) != null;
  });

  ExampleGroup.getter('identifiedExamplesMap', function() {
    var e, res, _i, _len, _ref;

    res = {};
    _ref = this.identifiedExamples;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      res[e.options.id] = e;
    }
    return res;
  });

  ExampleGroup.getter('finished', function() {
    return this.allExamples.every(function(e) {
      return e.finished;
    });
  });

  ExampleGroup.getter('failed', function() {
    return this.allExamples.some(function(e) {
      return e.failed;
    });
  });

  ExampleGroup.getter('succeed', function() {
    return !this.failed;
  });

  function ExampleGroup(block, desc, parent, options) {
    var owner, subject, type,
      _this = this;

    this.parent = parent;
    this.options = options != null ? options : {};
    subject = null;
    switch (typeof desc) {
      case 'string':
        if (desc.indexOf('.') === 0) {
          this.noSpaceBeforeDescription = true;
          owner = this.subject;
          subject = owner != null ? owner[desc.replace('.', '')] : void 0;
          if (typeof subject === 'function') {
            subject = subject.bind(owner);
          }
          this.ownSubjectBlock = function() {
            return subject;
          };
        } else if (desc.indexOf('::') === 0) {
          this.noSpaceBeforeDescription = true;
          type = typeof this.subjectBlock === "function" ? this.subjectBlock() : void 0;
          this.ownSubjectBlock = function() {
            if (type) {
              owner = build(type, _this.parameters || []);
              return owner[desc.replace('::', '')].bind(owner);
            }
          };
        } else {
          if (this.parent.description === '') {
            this.noSpaceBeforeDescription = true;
          }
        }
        break;
      default:
        this.noSpaceBeforeDescription = true;
        subject = desc;
        this.ownSubjectBlock = function() {
          return subject;
        };
        desc = (subject != null ? subject.name : void 0) || (subject != null ? subject._name : void 0) || (subject != null ? subject.toString() : void 0) || '';
    }
    ExampleGroup.__super__.constructor.call(this, block, desc, this.parent);
    this.children = [];
  }

  ExampleGroup.prototype.run = function() {};

  ExampleGroup.prototype.executeBlock = function() {
    return this.block.call(this);
  };

  ExampleGroup.prototype.toString = function() {
    return "[ExampleGroup(" + this.description + ")]";
  };

  return ExampleGroup;

})(spectacular.Example);
