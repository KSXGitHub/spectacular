// Generated by CoffeeScript 1.6.2
var URL, page, specsReady, squeeze, waitFor;

page = require('webpage').create();

URL = 'http://localhost:5000';

page.onConsoleMessage = function(msg, line, source) {
  return console.log(msg);
};

squeeze = function(str) {
  return str.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
};

page.open(URL, function(status) {
  var done, runnerAvailable;

  page.onLoadFinished = function() {};
  if (status !== 'success') {
    console.log(JSON.stringify({
      error: "Unable to access Spectacular specs at " + URL
    }));
    return phantom.exit();
  } else {
    runnerAvailable = page.evaluate(function() {
      return window.spectacular;
    });
    if (runnerAvailable) {
      done = function() {
        var result;

        result = page.evaluate(function() {
          return window.result;
        });
        console.log(page.evaluate(function() {
          return $("#examples .example.errored, #examples .example.failure").text();
        }));
        console.log(squeeze(page.evaluate(function() {
          return $("#reporter header pre").text();
        })));
        console.log(squeeze(page.evaluate(function() {
          return $("#reporter header p").text();
        })));
        if (result) {
          console.log('specs succeed');
          return phantom.exit(0);
        } else {
          console.log('specs failed');
          return phantom.exit(1);
        }
      };
      return waitFor(specsReady, done);
    } else {
      return phantom.exit(1);
    }
  }
});

specsReady = function() {
  return page.evaluate(function() {
    return window.resultReceived;
  });
};

waitFor = function(test, ready, timeout) {
  var condition, interval, start, wait;

  if (timeout == null) {
    timeout = 10000;
  }
  start = new Date().getTime();
  condition = false;
  wait = function() {
    if ((new Date().getTime() - start < timeout) && !condition) {
      return condition = test();
    } else {
      if (condition) {
        ready();
        return clearInterval(interval);
      } else {
        console.log('error with timeout');
        return phantom.exit(1);
      }
    }
  };
  return interval = setInterval(wait, 250);
};
