// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

spectacular.Promise = (function() {
  Promise.unit = function() {
    var promise;

    promise = new spectacular.Promise;
    promise.resolve(0);
    return promise;
  };

  Promise.all = function(promises) {
    var promise, results, solved;

    promise = new spectacular.Promise;
    solved = 0;
    results = [];
    promises.forEach(function(p) {
      return p.then(function(value) {
        solved++;
        results[promises.indexOf(p)] = value;
        if (solved === promises.length) {
          return promise.resolve(results);
        }
      }).fail(function(reason) {
        return promise.reject(reason);
      });
    });
    return promise;
  };

  function Promise() {
    this.pending = true;
    this.fulfilled = null;
    this.value = void 0;
    this.fulfilledHandlers = [];
    this.errorHandlers = [];
    this.progressHandlers = [];
  }

  Promise.prototype.isPending = function() {
    return this.pending;
  };

  Promise.prototype.isResolved = function() {
    return !this.pending;
  };

  Promise.prototype.isFulfilled = function() {
    return !this.pending && this.fulfilled;
  };

  Promise.prototype.isRejected = function() {
    return !this.pending && !this.fulfilled;
  };

  Promise.prototype.then = function(fulfilledHandler, errorHandler, progressHandler) {
    var e, f, promise;

    promise = new spectacular.Promise;
    f = function(value) {
      var res;

      res = typeof fulfilledHandler === "function" ? fulfilledHandler(value) : void 0;
      if ((res != null ? res.then : void 0) != null) {
        return res.then(function(value) {
          return promise.resolve(value);
        }).fail(function(reason) {
          return promise.reject(reason);
        });
      } else {
        return promise.resolve(res);
      }
    };
    e = function(reason) {
      if (typeof errorHandler === "function") {
        errorHandler(reason);
      }
      return promise.reject(reason);
    };
    if (this.pending) {
      this.fulfilledHandlers.push(f);
      this.errorHandlers.push(e);
      if (progressHandler != null) {
        this.progressHandlers.push(progressHandler);
      }
    } else {
      if (this.fulfilled) {
        f(this.value);
      } else {
        e(this);
      }
    }
    return promise;
  };

  Promise.prototype.fail = function(errorHandler) {
    return this.then((function() {}), errorHandler);
  };

  Promise.prototype.resolve = function(value) {
    this.value = value;
    if (!this.pending) {
      return;
    }
    this.fulfilled = true;
    this.notifyHandlers();
    return this.pending = false;
  };

  Promise.prototype.reject = function(reason) {
    if (!this.pending) {
      return;
    }
    this.reason = reason;
    this.fulfilled = false;
    this.notifyHandlers();
    return this.pending = false;
  };

  Promise.prototype.notifyHandlers = function() {
    var handler, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;

    if (!this.pending) {
      return;
    }
    if (this.fulfilled) {
      _ref = this.fulfilledHandlers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler(this.value));
      }
      return _results;
    } else {
      _ref1 = this.errorHandlers;
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        handler = _ref1[_j];
        _results1.push(handler(this.reason));
      }
      return _results1;
    }
  };

  return Promise;

})();

spectacular.AsyncExamplePromise = (function(_super) {
  __extends(AsyncExamplePromise, _super);

  function AsyncExamplePromise() {
    this.run = __bind(this.run, this);    this.interval = null;
    this.timeout = 5000;
    this.message = 'Timed out';
    AsyncExamplePromise.__super__.constructor.call(this);
  }

  AsyncExamplePromise.prototype.run = function() {
    var lastTime,
      _this = this;

    lastTime = new Date();
    return this.interval = setInterval(function() {
      if (new Date() - lastTime >= _this.timeout) {
        clearInterval(_this.interval);
        return _this.reject(new Error(_this.message));
      }
    }, 10);
  };

  AsyncExamplePromise.prototype.resolve = function(value) {
    clearInterval(this.interval);
    return AsyncExamplePromise.__super__.resolve.call(this, value);
  };

  AsyncExamplePromise.prototype.rejectAfter = function(timeout, message) {
    this.timeout = timeout;
    this.message = message;
  };

  return AsyncExamplePromise;

})(spectacular.Promise);
