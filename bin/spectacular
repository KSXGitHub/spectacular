#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
var ROOT, SPECTACULAR, SPECTACULAR_CONFIG, args, binPath, exists, existsSync, fs, node, option, options, path, vm, _ref,
  __slice = [].slice;

fs = require('fs');

vm = require('vm');

path = require('path');

exists = fs.exists || path.exists;

require('colors');

SPECTACULAR = path.resolve(__dirname, '..');

ROOT = path.resolve('.');

_ref = process.argv, node = _ref[0], binPath = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];

existsSync = fs.existsSync || path.existsSync;

SPECTACULAR_CONFIG = path.resolve(ROOT, '.spectacular');

if (existsSync(SPECTACULAR_CONFIG)) {
  args = fs.readFileSync(SPECTACULAR_CONFIG).toString().replace(/^\s+|\s+$/g, '').split(/\s+/g).concat(args);
}

options = {
  coffee: false,
  verbose: false,
  profile: false,
  trace: true,
  longTrace: false,
  showSource: true,
  documentation: false,
  matchersRoot: './specs/support/matchers',
  helpersRoot: './specs/support/helpers',
  fixturesRoot: './specs/support/fixtures',
  noMatchers: false,
  noHelpers: false,
  noColors: false,
  cli: true,
  server: false,
  phantomjs: false,
  globs: [],
  sources: []
};

while (args.length) {
  option = args.shift();
  switch (option) {
    case '--coffee':
    case '-c':
      options.coffee = true;
      require('coffee-script');
      break;
    case '--no-matchers':
      options.noMatchers = true;
      break;
    case '--no-helpers':
      options.noHelpers = true;
      break;
    case '--no-colors':
      options.noColors = true;
      break;
    case '--matchers':
    case '-m':
      options.matchersRoot = args.shift();
      break;
    case '--helpers':
      options.helpersRoot = args.shift();
      break;
    case '--fixtures':
      options.fixturesRoot = args.shift();
      break;
    case '--trace':
    case '-t':
      options.trace = true;
      break;
    case '--no-trace':
      options.trace = false;
      break;
    case '--long-trace':
      options.longTrace = true;
      break;
    case '--documentation':
    case '-d':
      options.documentation = true;
      break;
    case '--verbose':
    case '-v':
      options.verbose = true;
      break;
    case '--profile':
    case '-p':
      options.profile = true;
      break;
    case '--server':
    case '-s':
      options.server = true;
      break;
    case '--source':
      options.sources.push(args.shift());
      break;
    case '--phantomjs':
      options.server = true;
      options.phantomjs = true;
      break;
    default:
      options.globs.push(option);
  }
}

exists(path.resolve(ROOT, 'node_modules/spectacular'), function(exist) {
  var spectacular, spectacularPath;
  if (exist) {
    spectacularPath = path.resolve(ROOT, 'node_modules/spectacular');
  } else {
    spectacularPath = SPECTACULAR;
  }
  if (options.cli) {
    spectacular = require("" + spectacularPath + "/lib/cli");
  } else if (options.server) {
    spectacular = require("" + spectacularPath + "/lib/server");
  }
  if (spectacular != null) {
    return spectacular.run(options).then(function(status) {
      return process.exit(status);
    });
  }
});
