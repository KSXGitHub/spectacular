#!/usr/bin/env node
// Generated by CoffeeScript 1.6.2
var ROOT, SPECTACULAR, args, binPath, exists, fs, node, option, options, path, vm, _ref,
  __slice = [].slice;

fs = require('fs');

vm = require('vm');

path = require('path');

exists = fs.exists || path.exists;

SPECTACULAR = path.resolve(__dirname, '..');

ROOT = path.resolve('.');

_ref = process.argv, node = _ref[0], binPath = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];

options = {
  coffee: false,
  verbose: false,
  trace: false,
  matchersRoot: './specs/support/matchers',
  helpersRoot: './specs/support/helpers',
  noMatchers: false,
  noHelpers: false,
  globs: []
};

while (args.length) {
  option = args.shift();
  switch (option) {
    case '--coffee':
    case '-c':
      options.coffee = true;
      require('coffee-script');
      break;
    case '--no-matchers':
      options.noMatchers = true;
      break;
    case '--no-helpers':
      options.noHelpers = true;
      break;
    case '--matchers':
    case '-m':
      options.matchersRoot = options.shift();
      break;
    case '--helpers':
      options.helpersRoot = options.shift();
      break;
    case '--trace':
    case '-t':
      options.trace = true;
      break;
    case '--verbose':
    case '-v':
      options.verbose = true;
      break;
    default:
      options.globs.push(option);
  }
}

if (options.verbose) {
  console.log('options:', options);
}

exists(path.resolve(ROOT, 'node_modules/spectacular'), function(exist) {
  var spectacular;

  if (exist) {
    spectacular = require(path.resolve(ROOT, 'node_modules/spectacular/lib/index'));
  } else {
    spectacular = require(path.resolve(SPECTACULAR, 'lib/index'));
  }
  return spectacular.run(options).then(function(status) {
    return process.exit(status);
  });
});
