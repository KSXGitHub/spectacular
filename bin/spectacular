#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
var ROOT, SPECTACULAR, SPECTACULAR_CONFIG, args, binPath, deprecated, exists, existsSync, fs, node, option, options, path, vm, _ref,
  __slice = [].slice;

fs = require('fs');

vm = require('vm');

path = require('path');

exists = fs.exists || path.exists;

require('colors');

SPECTACULAR = path.resolve(__dirname, '..');

ROOT = path.resolve('.');

_ref = process.argv, node = _ref[0], binPath = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];

existsSync = fs.existsSync || path.existsSync;

SPECTACULAR_CONFIG = path.resolve(ROOT, '.spectacular');

if (args.length === 0 || !args.some(function(e) {
  return e === 'test' || e === 'server' || e === 'phantomjs';
})) {
  args.push('-h');
}

if (existsSync(SPECTACULAR_CONFIG)) {
  args = fs.readFileSync(SPECTACULAR_CONFIG).toString().replace(/^\s+|\s+$/g, '').split(/\s+/g).concat(args);
}

deprecated = function(message) {
  return console.log("DEPRECATION WARNING: " + message);
};

options = {
  coffee: false,
  verbose: false,
  profile: false,
  trace: true,
  longTrace: false,
  showSource: true,
  documentation: false,
  matchersRoot: './specs/support/matchers',
  helpersRoot: './specs/support/helpers',
  fixturesRoot: './specs/support/fixtures',
  phantomjsExecutable: 'phantomjs',
  noMatchers: false,
  noHelpers: false,
  colors: true,
  cli: false,
  server: false,
  phantomjs: false,
  random: true,
  seed: null,
  globs: [],
  sources: []
};

while (args.length) {
  option = args.shift();
  switch (option) {
    case 'test':
      options.cli = true;
      options.server = false;
      options.phantomjs = false;
      break;
    case 'server':
    case 's':
      options.cli = false;
      options.server = true;
      break;
    case 'phantomjs':
      options.cli = false;
      options.server = true;
      options.phantomjs = true;
      break;
    case '--coffee':
    case '-c':
      options.coffee = true;
      require('coffee-script');
      break;
    case '--no-matchers':
      options.noMatchers = true;
      break;
    case '--no-helpers':
      options.noHelpers = true;
      break;
    case '--colors':
      options.colors = true;
      break;
    case '--no-colors':
      options.colors = false;
      break;
    case '--matchers':
    case '-m':
      options.matchersRoot = args.shift();
      break;
    case '--helpers':
      options.helpersRoot = args.shift();
      break;
    case '--fixtures':
      options.fixturesRoot = args.shift();
      break;
    case '--trace':
    case '-t':
      options.trace = true;
      break;
    case '--no-trace':
      options.trace = false;
      break;
    case '--long-trace':
      options.longTrace = true;
      break;
    case '--documentation':
    case '-d':
      options.documentation = true;
      break;
    case '--verbose':
    case '-v':
      options.verbose = true;
      break;
    case '--profile':
    case '-p':
      options.profile = true;
      break;
    case '--random':
      options.random = true;
      break;
    case '--no-random':
      options.random = false;
      break;
    case '--seed':
      options.seed = parseInt(args.shift());
      break;
    case '--phantomjs-bin':
      options.phantomjsExecutable = args.shift();
      break;
    case '--server':
    case '-s':
      deprecated('--server and -s options are deprecated and may be removed in future release, use `spectacular server` or `spectacular s` instead.');
      options.cli = false;
      options.server = true;
      break;
    case '--phantomjs':
      deprecated('--phantomjs option is deprecated and may be removed in future release, use `spectacular phantomjs` instead.');
      options.cli = false;
      options.server = true;
      options.phantomjs = true;
      break;
    case '--source':
      options.sources.push(args.shift());
      break;
    case '--version':
      options.cli = false;
      console.log(require("" + ROOT + "/package.json").version);
      break;
    case '-h':
    case '--help':
      options.cli = false;
      console.log('\n# Spectacular Help\n\n  Usage:\n\n    spectacular [command] [options] [globs...]\n\n  Commands:\n\n    test        Run tests on NodeJS.\n    server      Start the Spectacular server.\n    phantomjs   Stats the Spectacular server and run tests in phantomjs.\n\n  Options:\n\n    -c, --coffee         Add support for CoffeeScript files.\n    -d, --documentation  Enable the documentation format in the output.\n    -h, --help           Display this message.\n    -m, --matchers PATH  Specify the path where project matchers can be found.\n    -p, --profile        Add a report with the 10 slowest examples.\n    -t, --trace          Enable stack trace report for failures.\n    -v, --verbose        Enable verbose output.\n    --fixtures PATH      Specify the path where project fixtures can be found.\n    --helpers PATH       Specify the path where project helpers can be found.\n    --long-trace         Display the full stack trace.\n    --colors             Enable coloring from the output.\n    --no-colors          Disable coloring from the output.\n    --seed               Set the seed of the test ranomizer.\n    --random             Enable the randomness of test execution\n    --no-random          Disable the randomness of test execution.\n    --no-helpers         Disable the loading of project helpers.\n    --no-matchers        Disable the loading of project matchers.\n    --no-trace           Remove stack trace from failures reports.\n    --source GLOB        Source files for the server.\n    --version            Display the Spectacular version.\n');
      break;
    default:
      options.globs.push(option);
  }
}

exists(path.resolve(ROOT, 'node_modules/spectacular'), function(exist) {
  var spectacular, spectacularPath;
  if (exist) {
    spectacularPath = path.resolve(ROOT, 'node_modules/spectacular');
  } else {
    spectacularPath = SPECTACULAR;
  }
  if (options.cli) {
    spectacular = require("" + spectacularPath + "/lib/cli");
  } else if (options.server) {
    spectacular = require("" + spectacularPath + "/lib/server");
  }
  if (spectacular != null) {
    return spectacular.run(options).then(function(status) {
      return process.exit(status);
    });
  }
});
